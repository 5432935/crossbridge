<asdoc>

<classRec name='AlcWorkerSprite' fullname='C_Run:AlcWorkerSprite' sourcefile='F:\crossbridge\posix\PlayerCreateWorker.as' namespace='C_Run' access='public' baseclass='flash.display:Sprite' isFinal='false' isDynamic='false' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='AlcWorkerSprite' fullname='C_Run:AlcWorkerSprite/AlcWorkerSprite' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
</method>
<method name='createRawWorker' fullname='C_Run:createRawWorker' isStatic='false' isFinal='false' isOverride='false'  param_names='ba' param_types='flash.utils:ByteArray' param_defaults='undefined' result_type='*'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='createflasccWorker' fullname='C_Run:createflasccWorker' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='newThread' fullname='C_Run:newThread' isStatic='false' isFinal='false' isOverride='false'  param_names='tid;esp_init;entryFun;args' param_types='int;int;int;Vector$int' param_defaults='undefined;undefined;undefined;undefined' result_type='*'>
<description><![CDATA[
  returns a new threadId given a stack, entry function, and arguments
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='ptr2funInit' fullname='C_Run:ptr2funInit' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='retargetSWF' fullname='C_Run:retargetSWF' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.utils:ByteArray'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='run' fullname='C_Run:AlcWorkerSprite/run' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='sbrk' fullname='C_Run:sbrk' isStatic='false' isFinal='false' isOverride='false'  param_names='size;align' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='threadArbCondWait' fullname='C_Run:threadArbCondWait' isStatic='false' isFinal='false' isOverride='false'  param_names='timo' param_types='Number' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='threadArbCondsNotify' fullname='C_Run:threadArbCondsNotify' isStatic='false' isFinal='false' isOverride='false'  param_names='mask' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='threadArbMutexLock' fullname='C_Run:threadArbMutexLock' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='threadArbMutexUnlock' fullname='C_Run:threadArbMutexUnlock' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='yield' fullname='C_Run:yield' isStatic='false' isFinal='false' isOverride='false'  param_names='ms' param_types='int' param_defaults='1' result_type='void'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='ESP_init' fullname='C_Run:ESP_init' type='int' isStatic='false' isConst='false' defaultValue='unknown' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='ESP' fullname='C_Run:ESP' type='int' isStatic='false' isConst='false' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='conditionClass' fullname='C_Run:conditionClass' type='Class' isStatic='false' isConst='true' defaultValue='unknown' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='domainClass' fullname='C_Run:domainClass' type='Class' isStatic='false' isConst='true' defaultValue='unknown' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='eax' fullname='C_Run:eax' type='int' isStatic='false' isConst='false' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='edx' fullname='C_Run:edx' type='int' isStatic='false' isConst='false' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='inf' fullname='C_Run:inf' type='Number' isStatic='false' isConst='true' defaultValue='Infinity' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='mutexClass' fullname='C_Run:mutexClass' type='Class' isStatic='false' isConst='true' defaultValue='unknown' >
<description><![CDATA[
  ]]></description>
<see><![CDATA[http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/concurrent/Mutex.html
  ]]></see>
<private><![CDATA[]]></private>
</field>
<field name='nan' fullname='C_Run:nan' type='Number' isStatic='false' isConst='true' defaultValue='NaN' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='pageSize' fullname='C_Run:pageSize' type='int' isStatic='false' isConst='true' defaultValue='4096' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='ptr2fun_init' fullname='C_Run:ptr2fun_init' type='' isStatic='false' isConst='false' defaultValue='unknown' >
<description><![CDATA[
  mapping of function pointer to Function
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='ram_init' fullname='C_Run:ram_init' type='flash.utils:ByteArray' isStatic='false' isConst='true' defaultValue='unknown' >
<description><![CDATA[
  local slot for "ram"
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='ram' fullname='C_Run:ram' type='flash.utils:ByteArray' isStatic='false' isConst='true' defaultValue='unknown' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='realThreadId' fullname='C_Run:realThreadId' type='int' isStatic='false' isConst='false' defaultValue='unknown' >
<description><![CDATA[
  this Worker's "real" (not impersonating) threadId
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='st0' fullname='C_Run:st0' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='stackAlign' fullname='C_Run:stackAlign' type='int' isStatic='false' isConst='true' defaultValue='16' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='stackSize' fullname='C_Run:stackSize' type='int' isStatic='false' isConst='true' defaultValue='1048576.0' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='threadArbConds' fullname='C_Run:threadArbConds' type='' isStatic='false' isConst='false' defaultValue='unknown' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='threadArbLockDepth' fullname='C_Run:threadArbLockDepth' type='int' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='threadArbMutex' fullname='C_Run:threadArbMutex' type='' isStatic='false' isConst='false' defaultValue='unknown' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='threadId' fullname='C_Run:threadId' type='int' isStatic='false' isConst='false' defaultValue='unknown' >
<description><![CDATA[
  this Worker's threadId
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='throwWhenOutOfMemory' fullname='C_Run:throwWhenOutOfMemory' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='workerClass' fullname='C_Run:workerClass' type='Class' isStatic='false' isConst='true' defaultValue='unknown' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='workerDomainClass' fullname='C_Run:workerDomainClass' type='Class' isStatic='false' isConst='true' defaultValue='unknown' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='workerInits' fullname='C_Run:workerInits' type='Vector$Function' isStatic='false' isConst='true' defaultValue='unknown' >
<description><![CDATA[
  clients who want to initialize workers on creation
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='workerSWFBytes' fullname='C_Run:workerSWFBytes' type='flash.utils:ByteArray' isStatic='false' isConst='false' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='yieldCond' fullname='C_Run:yieldCond' type='' isStatic='false' isConst='false' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='CModule' fullname='com.adobe.flascc:CModule' sourcefile='F:\crossbridge\posix\CModule.as' namespace='com.adobe.flascc' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
Contains convenience functions for reading and writting to domainMemory; also manages any flascc-specific global state (for example, the VFS and Posix interface implementations.)
]]></description>
</classRec>
<classRec name='GoingAsync' fullname='com.adobe.flascc:GoingAsync' sourcefile='F:\crossbridge\posix\CModule.as' namespace='com.adobe.flascc' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
]]></description>
<private><![CDATA[]]></private>
</classRec>
<classRec name='PtrLink' fullname='com.adobe.flascc:PtrLink' sourcefile='F:\crossbridge\posix\CModule.as' namespace='com.adobe.flascc' access='internal' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
]]></description>
<private><![CDATA[]]></private>
</classRec>
<classRec name='ThunkMaker' fullname='com.adobe.flascc:ThunkMaker' sourcefile='F:\crossbridge\posix\CModule.as' namespace='com.adobe.flascc' access='internal' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='CModule' fullname='com.adobe.flascc:CModule/CModule' isStatic='false' isFinal='false' isOverride='false'  param_names='sections;init;modSyms;modPackage' param_types='Object;Function;Array;String' param_defaults='undefined;undefined;undefined;undefined' result_type='*'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='PtrLink' fullname='com.adobe.flascc:PtrLink/PtrLink' isStatic='false' isFinal='false' isOverride='false'  param_names='ptr' param_types='int' param_defaults='undefined' result_type='*'>
</method>
<method name='ThunkMaker' fullname='com.adobe.flascc:ThunkMaker/ThunkMaker' isStatic='false' isFinal='false' isOverride='false'  param_names='modPkgName;thunkSet;start;end;index' param_types='String;flash.utils:Dictionary;int;int;int' param_defaults='undefined;undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
  Constructor
  ]]></description>
</method>
<method name='allocDataSect' fullname='com.adobe.flascc:CModule/allocDataSect' isStatic='true' isFinal='false' isOverride='false'  param_names='modPkgName;sectName;size;align' param_types='String;String;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
  allocate space in domainMemory for data
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='allocFunPtrs' fullname='com.adobe.flascc:CModule/allocFunPtrs' isStatic='true' isFinal='false' isOverride='false'  param_names='modPkgName;n;align' param_types='String;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
  note that this coexists peacefully w/ allocText-based function ptrs
  because allocText always returns a negative number and setting
  ptr2fun_init[someNegNumber] doesn't affect ptr2fun_init.length
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='allocTextSect' fullname='com.adobe.flascc:CModule/allocTextSect' isStatic='true' isFinal='false' isOverride='false'  param_names='modPkgName;sectName;size' param_types='String;String;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
  allocate a region in "text" space (i.e., code space)
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='allocaLatin1String' fullname='com.adobe.flascc:CModule/allocaLatin1String' isStatic='true' isFinal='false' isOverride='false'  param_names='s' param_types='String' param_defaults='undefined' result_type='int'>
<description><![CDATA[
  Allocas a Latin1 String
  ]]></description>
</method>
<method name='allocaPtrArray' fullname='com.adobe.flascc:CModule/private:allocaPtrArray' isStatic='true' isFinal='false' isOverride='false'  param_names='ptrs' param_types='Vector$int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='allocaStrings' fullname='com.adobe.flascc:CModule/private:allocaStrings' isStatic='true' isFinal='false' isOverride='false'  param_names='strs' param_types='Vector$String' param_defaults='undefined' result_type='Vector$int'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='allocaString' fullname='com.adobe.flascc:CModule/allocaString' isStatic='true' isFinal='false' isOverride='false'  param_names='s' param_types='String' param_defaults='undefined' result_type='int'>
<description><![CDATA[
  TBD
  ]]></description>
</method>
<method name='alloca' fullname='com.adobe.flascc:CModule/alloca' isStatic='true' isFinal='false' isOverride='false'  param_names='size' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
  should inline asm using me indicate that esp is clobbered?
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='callI' fullname='com.adobe.flascc:CModule/callI' isStatic='true' isFinal='false' isOverride='false'  param_names='functionPtr;args;stack;preserveStack' param_types='int;Vector$int;int;Boolean' param_defaults='undefined;null;0;false' result_type='int'>
<description><![CDATA[
  Low level API for calling a C/C++ function from Actionscript, returning a 32-bit value
  ]]></description>
<param><![CDATA[functionPtr The address of the function. You can find the address of a C/C++
             function by passing the name of the function to <code>getPublicSym</code>.
  ]]></param>
<param><![CDATA[args An optional vector containing 32-bit values to pass on the stack to
              the function. These could either be primitive integer data, or pointers.
              To pass more complex data types (including AS3 types) you should use the
              function annotation syntax explained in the interop tutorial to give the
              function a more natural AS3 function signature.
  ]]></param>
<param><![CDATA[stack An optional pointer to the base of the stack. A value of 0 means use the
               current ESP.
  ]]></param>
<param><![CDATA[preserveStack Indicates whether the stack pointer should unwind back to the value it was
                       before the function was called.
  ]]></param>
<return><![CDATA[The integer return value of the function. As above, to return complex (possibly AS3)
          types you should annotate the function as explained in the interop tutorial
          to give the function a more natural signature and return type.
  ]]></return>
</method>
<method name='callN' fullname='com.adobe.flascc:CModule/callN' isStatic='true' isFinal='false' isOverride='false'  param_names='functionPtr;args;stack;preserveStack' param_types='int;Vector$int;int;Boolean' param_defaults='undefined;null;0;false' result_type='Number'>
<description><![CDATA[
  Low level API for calling a C/C++ function from Actionscript returning a 64-bit floating point value
  ]]></description>
<param><![CDATA[functionPtr The address of the function. You can find the address of a C/C++
             function by passing the name of the function to <code>getPublicSym</code>.
  ]]></param>
<param><![CDATA[args A Vector containing 32-bit values to pass on the stack to
              the function. These could ewither be primitive integer data, or pointers.
              To pass more complex data types (including AS3 types) you should use the
              function annotation syntax explained in the interop tutorial to give the
              function a mopre natural AS3 function signature.
  ]]></param>
<param><![CDATA[stack An optional pointer to the base of the stack. A value of 0 means use the
               current ESP.
  ]]></param>
<param><![CDATA[preserveStack Indicates whether the stack pointer should unwind back to the value it was
                       before the function was called.
  ]]></param>
<return><![CDATA[The 64-bit floating point return value of the function. As above, to return complex (possibly AS3)
          types you should annotate the function as explained in the interop tutorial
          to give the function a more natural signature and return type.
  ]]></return>
</method>
<method name='describeType' fullname='com.adobe.flascc:CModule/describeType' isStatic='true' isFinal='false' isOverride='false'  param_names='value' param_types='*' param_defaults='undefined' result_type='XML'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dispose' fullname='com.adobe.flascc:CModule/dispose' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
  Resets the object properties and frees memory.
  ]]></description>
</method>
<method name='dispose' fullname='com.adobe.flascc:CModule/dispose' isStatic='true' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='explicitlyInitAllModules' fullname='com.adobe.flascc:CModule/explicitlyInitAllModules' isStatic='true' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='fixup16' fullname='com.adobe.flascc:CModule/fixup16' isStatic='false' isFinal='false' isOverride='false'  param_names='ptr;value' param_types='int;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='fixup32' fullname='com.adobe.flascc:CModule/fixup32' isStatic='false' isFinal='false' isOverride='false'  param_names='ptr;value' param_types='int;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='fixup8' fullname='com.adobe.flascc:CModule/fixup8' isStatic='false' isFinal='false' isOverride='false'  param_names='ptr;value' param_types='int;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='free' fullname='com.adobe.flascc:CModule/free' isStatic='true' isFinal='false' isOverride='false'  param_names='ptr' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
  Free a pointer that was previously allocated using <code>CModule.malloc()</code>.
    Internally this calls the libc implementation of <code>free()</code> so it can be used to free pointers allocated in C with <code>malloc()</code>.
  ]]></description>
</method>
<method name='getFixups' fullname='com.adobe.flascc:CModule/getFixups' isStatic='false' isFinal='false' isOverride='false'  result_type='Vector$int'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getModuleByPackage' fullname='com.adobe.flascc:CModule/getModuleByPackage' isStatic='true' isFinal='false' isOverride='false'  param_names='s' param_types='String' param_defaults='undefined' result_type='com.adobe.flascc:CModule'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getModuleVector' fullname='com.adobe.flascc:CModule/getModuleVector' isStatic='true' isFinal='false' isOverride='false'  result_type='Vector$com.adobe.flascc:CModule'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getPublicSymbol' fullname='com.adobe.flascc:CModule/getPublicSymbol' isStatic='true' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='int'>
<description><![CDATA[
  Lookup the specified publicly defined C/C++ symbol
    ]]></description>
<param><![CDATA[name The name of the symbol to lookup, for example, "malloc"
    ]]></param>
<return><![CDATA[The address of the symbol. If the symbol was a POD type you can read it's
          value using one of the read functions. If the symbol was a function then you can call it using callI.
  ]]></return>
</method>
<method name='getPublicSym' fullname='com.adobe.flascc:CModule/getPublicSym' isStatic='false' isFinal='false' isOverride='false'  param_names='s' param_types='String' param_defaults='undefined' result_type='int'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getScript' fullname='com.adobe.flascc:CModule/getScript' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getSections' fullname='com.adobe.flascc:CModule/getSections' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getSymsUsingMDWithExplicitSyms' fullname='com.adobe.flascc:CModule/private:getSymsUsingMDWithExplicitSyms' isStatic='false' isFinal='false' isOverride='false'  param_names='esyms' param_types='flash.utils:Dictionary' param_defaults='undefined' result_type='Array'>
</method>
<method name='getSymsUsingMD' fullname='com.adobe.flascc:CModule/getSymsUsingMD' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
  relies on metadata -- won't return info in stripped builds
  returns an Array of sym descriptors
  sym descriptor is an Array of form:
  [nmStyleType, symName(, sectName, value)]
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getSymsUsingMD' fullname='com.adobe.flascc:CModule/getSymsUsingMD' isStatic='true' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
  relies on metadata -- won't return info in stripped builds
  returns an Array of sym descriptors
  sym descriptor is an Array of form:
  [nmStyleType, symName(, sectName, value)]
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='makeThunk' fullname='com.adobe.flascc:CModule/com.adobe.flascc:makeThunk' isStatic='true' isFinal='false' isOverride='false'  param_names='modPkgName;thunkSet;start;end;index' param_types='String;flash.utils:Dictionary;int;int;int' param_defaults='undefined;undefined;undefined;undefined;undefined' result_type='Function'>
<description><![CDATA[  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='mallocLatin1String' fullname='com.adobe.flascc:CModule/mallocLatin1String' isStatic='true' isFinal='false' isOverride='false'  param_names='s' param_types='String' param_defaults='undefined' result_type='int'>
<description><![CDATA[
  Mallocs a Latin1 String
  ]]></description>
</method>
<method name='mallocPtrArray' fullname='com.adobe.flascc:CModule/private:mallocPtrArray' isStatic='true' isFinal='false' isOverride='false'  param_names='ptrs' param_types='Vector$int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
  Copies each string into a unique buffer in domainMemory
  ]]></description>
<param><![CDATA[strs A Vector containing the Actionscript strings t be copied into domainMemory
  ]]></param>
<retun><![CDATA[A Vector containing pointers to each of the allocated strings within domainMemory.
         As with mallocString() these are manually managed buffers and the caller is
         responsible for freeing each pointer using free().
  ]]></retun>
</method>
<method name='mallocStrings' fullname='com.adobe.flascc:CModule/private:mallocStrings' isStatic='true' isFinal='false' isOverride='false'  param_names='strs' param_types='Vector$String' param_defaults='undefined' result_type='Vector$int'>
<description><![CDATA[
  Copies each string into a unique buffer in domainMemory
  ]]></description>
<param><![CDATA[strs A Vector containing the Actionscript strings t be copied into domainMemory
  ]]></param>
<retun><![CDATA[A Vector containing pointers to each of the allocated strings within domainMemory.
         As with mallocString() these are manually managed buffers and the caller is
         responsible for freeing each pointer using free().
  ]]></retun>
</method>
<method name='mallocString' fullname='com.adobe.flascc:CModule/mallocString' isStatic='true' isFinal='false' isOverride='false'  param_names='s' param_types='String' param_defaults='undefined' result_type='int'>
<description><![CDATA[
  Allocate a buffer in domainMemory and write an actionscript string as UTF8 data into that buffer.
  ]]></description>
<param><![CDATA[s   The string you want to copy into domainMemory
  ]]></param>
<return><![CDATA[The pointer to the buffer in domainMemory that contains the string. This must be manually
          freed by passing this pointer to "free()"
  ]]></return>
</method>
<method name='malloc' fullname='com.adobe.flascc:CModule/malloc' isStatic='true' isFinal='false' isOverride='false'  param_names='size' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
  Allocate <i>size</i> bytes of data within the domainMemory ByteArray. The memory must be freed using <code>CModule.free()</code>.
  ]]></description>
<return><![CDATA[A pointer to a region of memory within domainMemory <i>size</i> bytes long.
    Internally this calls the libc implementation of <code>malloc()</code> so the returned value should be treated as though it had been allocated in C with <code>malloc()</code>.
  ]]></return>
</method>
<method name='mapCsymsWithExplicitValues' fullname='com.adobe.flascc:CModule/private:mapCsymsWithExplicitValues' isStatic='false' isFinal='false' isOverride='false'  param_names='map' param_types='flash.utils:Dictionary' param_defaults='undefined' result_type='void'>
<description><![CDATA[
  "sectName/value" => explicit value for Csym metadata in this module
  and populate "map"
  ]]></description>
</method>
<method name='mapCsymsWithExplicitValues' fullname='com.adobe.flascc:CModule/private:mapCsymsWithExplicitValues' isStatic='true' isFinal='false' isOverride='false'  result_type='flash.utils:Dictionary'>
</method>
<method name='notifyInit' fullname='com.adobe.flascc:CModule/notifyInit' isStatic='false' isFinal='false' isOverride='false'  param_names='script' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='once' fullname='com.adobe.flascc:CModule/once' isStatic='false' isFinal='false' isOverride='false'  param_names='f;args' param_types='Function;restParam' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='pop32' fullname='com.adobe.flascc:CModule/pop32' isStatic='true' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='prepForThreadedExec' fullname='com.adobe.flascc:CModule/prepForThreadedExec' isStatic='true' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='push32' fullname='com.adobe.flascc:CModule/push32' isStatic='true' isFinal='false' isOverride='false'  param_names='value' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='read16' fullname='com.adobe.flascc:CModule/read16' isStatic='true' isFinal='false' isOverride='false'  param_names='ptr' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
  Read a 16 bit value from domainMemory with zero padding to extend it to a 32 bit signed integer. This will always result in positive integers.
  ]]></description>
<param><![CDATA[ptr The address of the location in domainMemory to read from
  ]]></param>
<return><![CDATA[A 16 bit integer zero padded to 32 bit.
  ]]></return>
</method>
<method name='read32' fullname='com.adobe.flascc:CModule/read32' isStatic='true' isFinal='false' isOverride='false'  param_names='ptr' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
  Read a 32 bit value from domainMemory.
  ]]></description>
<param><![CDATA[ptr The address of the location in domainMemory to read from
  ]]></param>
<return><![CDATA[A 32 bit integer.
  ]]></return>
</method>
<method name='read8' fullname='com.adobe.flascc:CModule/read8' isStatic='true' isFinal='false' isOverride='false'  param_names='ptr' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
  Read an 8 bit value from domainMemory with zero padding to extend it to a 32 bit signed integer. This will always result in positive integers.
  ]]></description>
<param><![CDATA[ptr The address of the location in domainMemory to read from
  ]]></param>
<return><![CDATA[An 8 bit integer zero padded to 32 bit.
  ]]></return>
</method>
<method name='readBytes' fullname='com.adobe.flascc:CModule/readBytes' isStatic='true' isFinal='false' isOverride='false'  param_names='ptr;length;dst' param_types='int;uint;flash.utils:IDataOutput' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
  Copy data from domainMemory into an object implementing the IDataOutput interface (ByteArray, FileStream, Socket etc)
  ]]></description>
<param><![CDATA[ptr The address of the location in domainMemory to start reading from.
  ]]></param>
<param><![CDATA[length The number of bytes to copy from the domainMemory (starting from ptr)
  ]]></param>
<param><![CDATA[dst The IDataOutput to copy data into (the current position in this IDataOutput will be respected and will increase by length)
  ]]></param>
</method>
<method name='readDouble' fullname='com.adobe.flascc:CModule/readDouble' isStatic='true' isFinal='false' isOverride='false'  param_names='ptr' param_types='int' param_defaults='undefined' result_type='Number'>
<description><![CDATA[
  Read a 64 bit floating point value from domainMemory
  ]]></description>
<param><![CDATA[ptr The address of the location in domainMemory to read from
  ]]></param>
<return><![CDATA[A signed 64 bit floating point value
  ]]></return>
</method>
<method name='readFloat' fullname='com.adobe.flascc:CModule/readFloat' isStatic='true' isFinal='false' isOverride='false'  param_names='ptr' param_types='int' param_defaults='undefined' result_type='Number'>
<description><![CDATA[
  Read a 32 bit floating point value from domainMemory
  ]]></description>
<param><![CDATA[ptr The address of the location in domainMemory to read from
  ]]></param>
<return><![CDATA[A signed 32 bit floating point value
  ]]></return>
</method>
<method name='readIntVector' fullname='com.adobe.flascc:CModule/readIntVector' isStatic='true' isFinal='false' isOverride='false'  param_names='ptr;count' param_types='int;int' param_defaults='undefined;undefined' result_type='Vector$int'>
<description><![CDATA[
  Read <i>count</i> integers from the offset <i>ptr</i> in domainMemory into a Vector of ints.
  ]]></description>
<param><![CDATA[ptr The offset in domainMemory to read from
  ]]></param>
<param><![CDATA[count The number of 32 bit integers to read
  ]]></param>
<return><![CDATA[A Vector of ints read from domainMemory
  ]]></return>
</method>
<method name='readLatin1String' fullname='com.adobe.flascc:CModule/readLatin1String' isStatic='true' isFinal='false' isOverride='false'  param_names='ptr;length' param_types='int;int' param_defaults='undefined;undefined' result_type='String'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='readString' fullname='com.adobe.flascc:CModule/readString' isStatic='true' isFinal='false' isOverride='false'  param_names='ptr;length' param_types='int;int' param_defaults='undefined;undefined' result_type='String'>
<description><![CDATA[
  Read UTF8 data from domainMemory and construct an Actionscript String
  ]]></description>
<param><![CDATA[ptr The location in domainMemory to start reading from
  ]]></param>
<param><![CDATA[length The number of bytes to read
  ]]></param>
<return><![CDATA[A String constructed from the UTF8 data found between ptr and ptr+length
  ]]></return>
</method>
<method name='regFun' fullname='com.adobe.flascc:CModule/regFun' isStatic='true' isFinal='false' isOverride='false'  param_names='ptr;f' param_types='int;Function' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
  Registers a function by pointer
  ]]></description>
</method>
<method name='regModule' fullname='com.adobe.flascc:CModule/regModule' isStatic='true' isFinal='false' isOverride='false'  param_names='sections;init;modSyms;modPackage' param_types='Object;Function;Array;String' param_defaults='undefined;undefined;undefined;undefined' result_type='com.adobe.flascc:CModule'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='resolveWeaks' fullname='com.adobe.flascc:CModule/resolveWeaks' isStatic='true' isFinal='false' isOverride='false'  param_names='f' param_types='Function' param_defaults='undefined' result_type='void'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='runCtors' fullname='com.adobe.flascc:CModule/runCtors' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='runCtors' fullname='com.adobe.flascc:CModule/runCtors' isStatic='true' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='runDtors' fullname='com.adobe.flascc:CModule/runDtors' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='runDtors' fullname='com.adobe.flascc:CModule/runDtors' isStatic='true' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='runningAsWorker' fullname='com.adobe.flascc:CModule/runningAsWorker' isStatic='true' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
  Console should use this function to check if the SWF
  has been launched as an isolate so it can act appropriately
  ]]></description>
</method>
<method name='sendMetric' fullname='com.adobe.flascc:CModule/sendMetric' isStatic='true' isFinal='false' isOverride='false'  param_names='metric;value' param_types='String;*' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='sendSpanMetric' fullname='com.adobe.flascc:CModule/sendSpanMetric' isStatic='true' isFinal='false' isOverride='false'  param_names='metric;startSpanMarker;value' param_types='String;Number;*' param_defaults='undefined;undefined;null' result_type='void'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='serviceUIRequests' fullname='com.adobe.flascc:CModule/serviceUIRequests' isStatic='true' isFinal='false' isOverride='false'  param_names='event' param_types='Object' param_defaults='null' result_type='void'>
<description><![CDATA[
  This method services any pending uiThunk requests that background threads
  have queued up. A good place to call this would be in the <code>enterFrame</code> handler.
  Update: you can attach your dispatchers directly into this handler since the optional event arg.
  ]]></description>
</method>
<method name='startAsync' fullname='com.adobe.flascc:CModule/startAsync' isStatic='true' isFinal='false' isOverride='false'  param_names='console;args;env;preserveStack;isAutoSetRealThreadId' param_types='Object;Vector$String;Vector$String;Boolean;Boolean' param_defaults='null;null;null;true;true' result_type='void'>
<description><![CDATA[
  Calls the libc <code>__start1</code> function which, in turn, causes <code>main()</code> to execute. Unlike <code>start()</code>, this method handles the case where the main C run loop has been broken by a call to "AS3_GoAsync" within the C code. This allows main to return without allowing C/C++ static initializers to run. This should be used when you want to run long running code with a broken run-loop, or run some code as a library.
  ]]></description>
<param><![CDATA[console The current Console object
  ]]></param>
<param><![CDATA[args A vector of Strings that are used to fill the argv array given to main. The first String is typically used to specify the name of the application.
  ]]></param>
<param><![CDATA[env A vector of Strings that are used to populate the environment variables accesible by <code>getenv()</code>. There should be an even number of Strings in this Vector as they are treated as name/value pairs.
  ]]></param>
<param><![CDATA[preserveStack Inidcates whether the C stack should be preserved after the call to <code>__start1</code>. If this is set to false the stack depth will return to the value when start() was called upon return.
  ]]></param>
<param><![CDATA[isAutoSetRealThreadId Inidcates whether the module should auto-set its real thread id. Use false when using multi-threaded SWCs.
  ]]></param>
</method>
<method name='startBackground' fullname='com.adobe.flascc:CModule/startBackground' isStatic='true' isFinal='false' isOverride='false'  param_names='console;args;env;afterStackSize' param_types='Object;Vector$String;Vector$String;int' param_defaults='null;null;null;65536' result_type='void'>
<description><![CDATA[
  Creates a background Worker and runs the libc function <code>__start1</code> within that Worker. This allows you to run main without breaking the run loop, but requires the SWF to be version 18 or higher (Flash Runtime 11.5).
  ]]></description>
<param><![CDATA[console The current Console object
  ]]></param>
<param><![CDATA[args A vector of Strings that are used to fill the argv array given to main. The first String is typically used to specify the name of the application.
  ]]></param>
<param><![CDATA[env A vector of Strings that are used to populate the environment variables accesible by <code>getenv()</code>. There should be an even number of Strings in this Vector as they are treated as name/value pairs.
  ]]></param>
<param><![CDATA[afterStackSize The amount of stack space to allocate for the ui thread (code that will run the uiThunk callbacks and also any calls to callI coming from the main Worker).
  ]]></param>
</method>
<method name='start' fullname='com.adobe.flascc:CModule/start' isStatic='true' isFinal='false' isOverride='false'  param_names='console;args;env;preserveStack' param_types='Object;Vector$String;Vector$String;Boolean' param_defaults='undefined;null;null;true' result_type='int'>
<description><![CDATA[
  Calls the libc <code>__start1</code> function which, in turn, causes <code>main()</code> to execute.
  ]]></description>
<param><![CDATA[console The current Console object
  ]]></param>
<param><![CDATA[args A vector of Strings that are used to fill the argv array given to main. The first String is typically used to specify the name of the application.
  ]]></param>
<param><![CDATA[env A vector of Strings that are used to populate the environment variables accesible by <code>getenv()</code>. There should be an even number of Strings in this Vector as they are treated as name/value pairs.
  ]]></param>
<param><![CDATA[preserveStack Indicates whether the C stack should be preserved after the call to <code>__start1</code>. If this is set to false the stack depth will return to the value when start() was called upon return.
  ]]></param>
<return><![CDATA[The exit code of the C application
  ]]></return>
</method>
<method name='thunk' fullname='com.adobe.flascc:ThunkMaker/thunk' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
  TBD
  ]]></description>
</method>
<method name='write16' fullname='com.adobe.flascc:CModule/write16' isStatic='true' isFinal='false' isOverride='false'  param_names='ptr;value' param_types='int;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
  Write the low 16 bits of <i>value</i> into domainMemory.
  ]]></description>
<param><![CDATA[ptr The address of the location in domainMemory to write to
  ]]></param>
<param><![CDATA[value The value to write (only the low 16 bits are written)
  ]]></param>
</method>
<method name='write32' fullname='com.adobe.flascc:CModule/write32' isStatic='true' isFinal='false' isOverride='false'  param_names='ptr;value' param_types='int;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
  Write a 32 bit value into domainMemory
  ]]></description>
<param><![CDATA[ptr The address of the location in domainMemory to write to
  ]]></param>
<param><![CDATA[value The value to write
  ]]></param>
</method>
<method name='write8' fullname='com.adobe.flascc:CModule/write8' isStatic='true' isFinal='false' isOverride='false'  param_names='ptr;value' param_types='int;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
  Write the low 8 bits of <i>value</i> into domainMemory.
  ]]></description>
<param><![CDATA[ptr The address of the location in domainMemory to write to
  ]]></param>
<param><![CDATA[value The value to write (only the low 8 bits are written)
  ]]></param>
</method>
<method name='writeBytes' fullname='com.adobe.flascc:CModule/writeBytes' isStatic='true' isFinal='false' isOverride='false'  param_names='ptr;length;source' param_types='int;uint;flash.utils:IDataInput' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
  Copy the contents of an object that implements the IDataInput interface (ByteArray, FileStream, Socket etc) into domainMemory.
  ]]></description>
<param><![CDATA[ptr The address of the location in domainMemory to start writting to
  ]]></param>
<param><![CDATA[length The number of bytes to copy from the source bytearray (starting from source.position)
  ]]></param>
<param><![CDATA[source The IDataInput to copy data from (the current position in this IDataInput will be used, and will increase by length)
  ]]></param>
</method>
<method name='writeDouble' fullname='com.adobe.flascc:CModule/writeDouble' isStatic='true' isFinal='false' isOverride='false'  param_names='ptr;value' param_types='int;Number' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
  Write a Number as a 64 bit float into domainMemory
  ]]></description>
<param><![CDATA[ptr The address of the location in domainMemory to write to
  ]]></param>
<param><![CDATA[value The value to write at the address
  ]]></param>
</method>
<method name='writeFloat' fullname='com.adobe.flascc:CModule/writeFloat' isStatic='true' isFinal='false' isOverride='false'  param_names='ptr;value' param_types='int;Number' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
  Write a Number as a 32 bit float into domainMemory
  ]]></description>
<param><![CDATA[ptr The address of the location in domainMemory to write to
  ]]></param>
<param><![CDATA[value The value to write at the address (will be rounded to the nearest 32bit floating point value)
  ]]></param>
</method>
<method name='writeIntVector' fullname='com.adobe.flascc:CModule/writeIntVector' isStatic='true' isFinal='false' isOverride='false'  param_names='ptr;vec' param_types='int;Vector$int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
  Write a Vector of ints into domainMemory starting at offset <i>ptr</i>.
  ]]></description>
<param><![CDATA[ptr The offset in domainMemory to start writing to
  ]]></param>
<param><![CDATA[vec The Vector of ints to write into domainMemory
  ]]></param>
</method>
<method name='writeLatin1String' fullname='com.adobe.flascc:CModule/writeLatin1String' isStatic='true' isFinal='false' isOverride='false'  param_names='ptr;s' param_types='int;String' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='writeString' fullname='com.adobe.flascc:CModule/writeString' isStatic='true' isFinal='false' isOverride='false'  param_names='ptr;s' param_types='int;String' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
  Write an actionscript string as UTF8 data into domainMemory
  ]]></description>
<param><![CDATA[ptr The location in domainMemory where the string will be written. You must ensure that this
             points to a buffer in the flascc world that has enough space to hold the string
             data or this method will overwrite other data within your program. Consider using
             <code>mallocString</code> instead as it will allocate the correct amount of space.
  ]]></param>
<return><![CDATA[The number of bytes written
  ]]></return>
</method>
<method name='canUseWorkers' fullname='com.adobe.flascc:CModule/canUseWorkers/get' isStatic='true' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
  Returns true if the current environment supports
  use of ActionScript Workers with flascc content
  ]]></description>
</method>
<method name='kernel' fullname='com.adobe.flascc:CModule/kernel/get' isStatic='true' isFinal='false' isOverride='false'  result_type='com.adobe.flascc.kernel:IKernel'>
<description><![CDATA[
    Return the current kernel implementation
    ]]></description>
<return><![CDATA[An object that implements the Posix interface defined by PlayerKernel
    ]]></return>
</method>
<method name='ram' fullname='com.adobe.flascc:CModule/ram/get' isStatic='true' isFinal='false' isOverride='false'  result_type='flash.utils:ByteArray'>
<description><![CDATA[
  Returns the ByteArray object using as RAM
  ]]></description>
</method>
<method name='throwWhenOutOfMemory' fullname='com.adobe.flascc:CModule/throwWhenOutOfMemory/get' isStatic='true' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
  Returns a boolean indicating whether Flash out of memory conditions when growing the domainMemory ByteArray will throw an ActionScript exception. The default is false, malloc will return an appropriate failure and new/new[] will throw a std::badalloc C++ exception.
  ]]></description>
</method>
<method name='vfs' fullname='com.adobe.flascc:CModule/vfs/get' isStatic='true' isFinal='false' isOverride='false'  result_type='com.adobe.flascc.vfs:IVFS'>
<description><![CDATA[
  The current VFS implementation
  ]]></description>
<return><![CDATA[An object that implements the IVFS interface
  ]]></return>
</method>
<method name='kernel' fullname='com.adobe.flascc:CModule/kernel/set' isStatic='true' isFinal='false' isOverride='false'  param_names='kernel' param_types='com.adobe.flascc.kernel:IKernel' param_defaults='undefined' result_type='void'>
<description><![CDATA[
    Set the current kernel implementation
    ]]></description>
<param><![CDATA[kernel The object satisfying IKernel to act as the current flascc Kernel
    ]]></param>
</method>
<method name='throwWhenOutOfMemory' fullname='com.adobe.flascc:CModule/throwWhenOutOfMemory/set' isStatic='true' isFinal='false' isOverride='false'  param_names='x' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
  Sets a boolean indicating whether Flash out of memory conditions when growing the domainMemory ByteArray will throw an ActionScript exception or cause malloc to fail. The default is false, malloc will return an appropriate failure and new/new[] will throw a std::badalloc C++ exception.
  ]]></description>
</method>
<method name='vfs' fullname='com.adobe.flascc:CModule/vfs/set' isStatic='true' isFinal='false' isOverride='false'  param_names='fs' param_types='com.adobe.flascc.vfs:IVFS' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_vfs' fullname='com.adobe.flascc:CModule/private:_vfs' type='Object' isStatic='true' isConst='false' defaultValue='null' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='activeConsole' fullname='com.adobe.flascc:CModule/activeConsole' type='Object' isStatic='true' isConst='false' >
<description><![CDATA[
  A reference to the current Console object, it is set when one of the start methods is called
  ]]></description>
</field>
<field name='cachedCSyms' fullname='com.adobe.flascc:CModule/private:cachedCSyms' type='flash.utils:Dictionary' isStatic='true' isConst='false' defaultValue='unknown' >
</field>
<field name='callIArgs' fullname='com.adobe.flascc:CModule/private:callIArgs' type='Vector$int' isStatic='true' isConst='true' defaultValue='unknown' >
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='end' fullname='com.adobe.flascc:ThunkMaker/private:end' type='int' isStatic='false' isConst='false' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='explicitlyInittedAllModules' fullname='com.adobe.flascc:CModule/com.adobe.flascc:explicitlyInittedAllModules' type='Boolean' isStatic='true' isConst='false' defaultValue='false' >
<description><![CDATA[  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='fixups' fullname='com.adobe.flascc:CModule/private:fixups' type='Vector$int' isStatic='false' isConst='false' >
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='index' fullname='com.adobe.flascc:ThunkMaker/private:index' type='int' isStatic='false' isConst='false' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='init' fullname='com.adobe.flascc:CModule/private:init' type='Function' isStatic='false' isConst='false' >
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='modPackage' fullname='com.adobe.flascc:CModule/private:modPackage' type='String' isStatic='false' isConst='false' >
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='modPkgName' fullname='com.adobe.flascc:ThunkMaker/private:modPkgName' type='String' isStatic='false' isConst='false' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='modSyms' fullname='com.adobe.flascc:CModule/private:modSyms' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='modThunks' fullname='com.adobe.flascc:CModule/com.adobe.flascc:modThunks' type='flash.utils:Dictionary' isStatic='true' isConst='true' defaultValue='unknown' >
<description><![CDATA[  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='modules' fullname='com.adobe.flascc:CModule/protected:modules' type='Vector$com.adobe.flascc:CModule' isStatic='true' isConst='true' defaultValue='unknown' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='next' fullname='com.adobe.flascc:PtrLink/next' type='com.adobe.flascc:PtrLink' isStatic='false' isConst='false' >
</field>
<field name='oncep' fullname='com.adobe.flascc:CModule/oncep' type='int' isStatic='false' isConst='true' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='preppedForThreadedExec' fullname='com.adobe.flascc:CModule/com.adobe.flascc:preppedForThreadedExec' type='Boolean' isStatic='true' isConst='false' defaultValue='false' >
<description><![CDATA[  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='ptr' fullname='com.adobe.flascc:PtrLink/ptr' type='int' isStatic='false' isConst='true' defaultValue='0' >
</field>
<field name='recordFixups' fullname='com.adobe.flascc:CModule/recordFixups' type='Boolean' isStatic='true' isConst='false' defaultValue='false' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='regsInitted' fullname='com.adobe.flascc:CModule/regsInitted' type='Boolean' isStatic='true' isConst='false' defaultValue='false' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='rootSprite' fullname='com.adobe.flascc:CModule/rootSprite' type='flash.display:Sprite' isStatic='true' isConst='false' >
<description><![CDATA[
    A reference to the current rootSprite so that flascc code has an easy way of getting to the stage regardless of what preloaders might be employed.
    ]]></description>
</field>
<field name='scratchBA' fullname='com.adobe.flascc:CModule/protected:scratchBA' type='flash.utils:ByteArray' isStatic='true' isConst='true' defaultValue='unknown' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='script' fullname='com.adobe.flascc:CModule/private:script' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='sections' fullname='com.adobe.flascc:CModule/private:sections' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='seenModuleInit' fullname='com.adobe.flascc:CModule/private:seenModuleInit' type='Boolean' isStatic='true' isConst='false' >
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='start' fullname='com.adobe.flascc:ThunkMaker/private:start' type='int' isStatic='false' isConst='false' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='telemetrySupported' fullname='com.adobe.flascc:CModule/private:telemetrySupported' type='Boolean' isStatic='true' isConst='false' >
</field>
<field name='text' fullname='com.adobe.flascc:CModule/protected:text' type='int' isStatic='true' isConst='false' defaultValue='unknown' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='thunkSet' fullname='com.adobe.flascc:ThunkMaker/private:thunkSet' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='toBeMapped' fullname='com.adobe.flascc:CModule/private:toBeMapped' type='Vector$com.adobe.flascc:CModule' isStatic='true' isConst='false' defaultValue='unknown' >
</field>
<field name='weakResolvers' fullname='com.adobe.flascc:CModule/protected:weakResolvers' type='Vector$Function' isStatic='true' isConst='false' defaultValue='unknown' >
<description><![CDATA[
  ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='workerSprite' fullname='com.adobe.flascc:CModule/private:workerSprite' type='' isStatic='true' isConst='false' defaultValue='null' >
<description><![CDATA[
   ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='Console' fullname='com.adobe.flascc:Console' sourcefile='F:\crossbridge\posix\Console.as' namespace='com.adobe.flascc' access='public' baseclass='flash.display:Sprite' interfaces='com.adobe.flascc.vfs:ISpecialFile' isFinal='false' isDynamic='false' >
<description><![CDATA[
 A basic implementation of a console for CrossBridge apps.
 The PlayerKernel class delegates to this for things like read/write,
 so that console output can be displayed in a TextField on the Stage.
 ]]></description>
</classRec>
<method name='Console' fullname='com.adobe.flascc:Console/Console' isStatic='false' isFinal='false' isOverride='false'  param_names='container;enableConsole' param_types='flash.display:DisplayObjectContainer;Boolean' param_defaults='null;true' result_type='*'>
<description><![CDATA[
     To Support the preloader case you might want to have the Console
     act as a child of some other DisplayObjectContainer.
     ]]></description>
</method>
<method name='consoleWrite' fullname='com.adobe.flascc:Console/protected:consoleWrite' isStatic='false' isFinal='false' isOverride='false'  param_names='s' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Helper function that traces to the flashlog text file and also
     displays output in the on-screen textfield console.
     ]]></description>
</method>
<method name='dispose' fullname='com.adobe.flascc:Console/dispose' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='null' result_type='void'>
<description><![CDATA[
     Disposes Console freeing memory
     ]]></description>
</method>
<method name='enterFrame' fullname='com.adobe.flascc:Console/protected:enterFrame' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     The enterFrame callback is run once every frame. UI thunk requests should be handled
     here by calling <code>CModule.serviceUIRequests()</code> (see CModule ASdocs for more information on the UI thunking functionality).
     ]]></description>
</method>
<method name='exit' fullname='com.adobe.flascc:Console/exit' isStatic='false' isFinal='false' isOverride='false'  param_names='code' param_types='int' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
     The PlayerKernel implementation will use this function to handle
     C process exit requests
     ]]></description>
</method>
<method name='fcntl' fullname='com.adobe.flascc:Console/fcntl' isStatic='false' isFinal='false' isOverride='false'  param_names='fd;com;data;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
     The PlayerKernel implementation uses this function to handle
     C fcntl requests to the file "/dev/tty."
     See the ISpecialFile documentation for more information about the
     arguments and return value.
     ]]></description>
</method>
<method name='init' fullname='com.adobe.flascc:Console/protected:init' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     All of the real FlasCC init happens in this method,
     which is either run on startup or once the SWF has
     been added to the stage.
     ]]></description>
</method>
<method name='ioctl' fullname='com.adobe.flascc:Console/ioctl' isStatic='false' isFinal='false' isOverride='false'  param_names='fd;com;data;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
     The PlayerKernel implementation uses this function to handle
     C ioctl requests to the file "/dev/tty."
     See the ISpecialFile documentation for more information about the
     arguments and return value.
     ]]></description>
</method>
<method name='read' fullname='com.adobe.flascc:Console/read' isStatic='false' isFinal='false' isOverride='false'  param_names='fd;bufPtr;nbyte;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
     The PlayerKernel implementation uses this function to handle
     C IO read requests to the file "/dev/tty" (for example, reads from stdin
     will expect this function to provide the data). See the ISpecialFile
     documentation for more information about the arguments and return value.
     ]]></description>
</method>
<method name='switchConsole' fullname='com.adobe.flascc:Console/switchConsole' isStatic='false' isFinal='false' isOverride='false'  param_names='isEnabled' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Switches default console logging behaviour (text field output)
     ]]></description>
</method>
<method name='write' fullname='com.adobe.flascc:Console/write' isStatic='false' isFinal='false' isOverride='false'  param_names='fd;bufPtr;nbyte;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
     The PlayerKernel implementation uses this function to handle
     C IO write requests to the file "/dev/tty" (for example, output from
     printf will pass through this function). See the ISpecialFile
     documentation for more information about the arguments and return value.
     ]]></description>
</method>
<method name='consoleText' fullname='com.adobe.flascc:Console/consoleText/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
     Provide a way to get the TextField's text.
     ]]></description>
</method>
<field name='_tf' fullname='com.adobe.flascc:Console/private:_tf' type='flash.text:TextField' isStatic='false' isConst='false' >
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='enableConsole' fullname='com.adobe.flascc:Console/private:enableConsole' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='exitHook' fullname='com.adobe.flascc:Console/exitHook' type='Function' isStatic='false' isConst='false' >
<description><![CDATA[
     The callback to call when CrossBridge code calls the <code>posix exit()</code> function. Leave null to exit silently.
     ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='inputContainer' fullname='com.adobe.flascc:Console/private:inputContainer' type='flash.display:DisplayObjectContainer' isStatic='false' isConst='false' >
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='ZipFile' fullname='com.adobe.flascc.vfs.zip:ZipFile' sourcefile='F:\crossbridge\posix\vfs\nochump\util\zip\ZipFile.as' namespace='com.adobe.flascc.vfs.zip' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 This class represents a Zip archive.  You can ask for the contained
	 entries, or get an input stream for a file entry.  The entry is
	 automatically decompressed.
	 
	 ]]></description>
<author><![CDATA[David Chang
	 ]]></author>
<private><![CDATA[]]></private>
</classRec>
<method name='ZipFile' fullname='com.adobe.flascc.vfs.zip:ZipFile/ZipFile' isStatic='false' isFinal='false' isOverride='false'  param_names='data' param_types='flash.utils:IDataInput' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Opens a Zip file reading the given data.
		 
		 ]]></description>
<param><![CDATA[data
		 ]]></param>
</method>
<method name='findEND' fullname='com.adobe.flascc.vfs.zip:ZipFile/private:findEND' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
</method>
<method name='getEntry' fullname='com.adobe.flascc.vfs.zip:ZipFile/getEntry' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='com.adobe.flascc.vfs.zip:ZipEntry'>
<description><![CDATA[
		 Searches for a zip entry in this archive with the given name.
		 		 ]]></description>
<param><![CDATA[name the name. May contain directory components separated by
		 slashes ('/').
		 ]]></param>
<return><![CDATA[the zip entry, or null if no entry with that name exists.
		 ]]></return>
</method>
<method name='getInput' fullname='com.adobe.flascc.vfs.zip:ZipFile/getInput' isStatic='false' isFinal='false' isOverride='false'  param_names='entry' param_types='com.adobe.flascc.vfs.zip:ZipEntry' param_defaults='undefined' result_type='flash.utils:ByteArray'>
<description><![CDATA[
		 Creates a byte array reading the given zip entry as
		 uncompressed data.  Normally zip entry should be an entry
		 returned by getEntry() or entries().
		 
		 ]]></description>
<param><![CDATA[entry the entry to create a byte array for.
		 ]]></param>
<return><![CDATA[the byte array, or null if the requested entry does not exist.
		 ]]></return>
</method>
<method name='readEND' fullname='com.adobe.flascc.vfs.zip:ZipFile/private:readEND' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Reads the total number of entries in the central dir and
		 positions buf at the start of the central directory.
		 ]]></description>
</method>
<method name='readEntries' fullname='com.adobe.flascc.vfs.zip:ZipFile/private:readEntries' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Read the central directory of a zip file and fill the entries
		 array.  This is called exactly once when first needed.
		 ]]></description>
</method>
<method name='entries' fullname='com.adobe.flascc.vfs.zip:ZipFile/entries/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 Returns an array of all Zip entries in this Zip file.
		 ]]></description>
</method>
<method name='size' fullname='com.adobe.flascc.vfs.zip:ZipFile/size/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
		 Returns the number of entries in this zip file.
		 ]]></description>
</method>
<field name='buf' fullname='com.adobe.flascc.vfs.zip:ZipFile/private:buf' type='flash.utils:ByteArray' isStatic='false' isConst='false' >
</field>
<field name='entryList' fullname='com.adobe.flascc.vfs.zip:ZipFile/private:entryList' type='Array' isStatic='false' isConst='false' >
</field>
<field name='entryTable' fullname='com.adobe.flascc.vfs.zip:ZipFile/private:entryTable' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
</field>
<field name='locOffsetTable' fullname='com.adobe.flascc.vfs.zip:ZipFile/private:locOffsetTable' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
</field>
<classRec name='CRC32' fullname='com.adobe.flascc.vfs.zip:CRC32' sourcefile='F:\crossbridge\posix\vfs\nochump\util\zip\CRC32.as' namespace='com.adobe.flascc.vfs.zip' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Computes CRC32 data checksum of a data stream.
	 The actual CRC32 algorithm is described in RFC 1952
	 (GZIP file format specification version 4.3).
	 
	 ]]></description>
<author><![CDATA[David Chang
	 ]]></author>
<private><![CDATA[]]></private>
<date><![CDATA[January 2, 2007.
	 ]]></date>
</classRec>
<method name='CRC32' fullname='com.adobe.flascc.vfs.zip:CRC32/CRC32' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
</method>
<method name='getValue' fullname='com.adobe.flascc.vfs.zip:CRC32/getValue' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
		 Returns the CRC32 data checksum computed so far.
		 ]]></description>
</method>
<method name='makeCrcTable' fullname='com.adobe.flascc.vfs.zip:CRC32/private:makeCrcTable' isStatic='true' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[ Make the table for a fast CRC. ]]></description>
</method>
<method name='reset' fullname='com.adobe.flascc.vfs.zip:CRC32/reset' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Resets the CRC32 data checksum as if no update was ever called.
		 ]]></description>
</method>
<method name='update' fullname='com.adobe.flascc.vfs.zip:CRC32/update' isStatic='false' isFinal='false' isOverride='false'  param_names='buf' param_types='flash.utils:ByteArray' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Adds the complete byte array to the data checksum.
		 
		 ]]></description>
<param><![CDATA[buf the buffer which contains the data
		 ]]></param>
</method>
<field name='crcTable' fullname='com.adobe.flascc.vfs.zip:CRC32/private:crcTable' type='Array' isStatic='true' isConst='false' defaultValue='unknown' >
<description><![CDATA[ The fast CRC table. Computed once when the CRC32 class is loaded. ]]></description>
</field>
<field name='crc' fullname='com.adobe.flascc.vfs.zip:CRC32/private:crc' type='uint' isStatic='false' isConst='false' >
<description><![CDATA[ The crc data checksum so far. ]]></description>
</field>
<classRec name='Deflater' fullname='com.adobe.flascc.vfs.zip:Deflater' sourcefile='F:\crossbridge\posix\vfs\nochump\util\zip\Deflater.as' namespace='com.adobe.flascc.vfs.zip' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 This is the Deflater class.  The deflater class compresses input
	 with the deflate algorithm described in RFC 1951.  It uses the
	 ByteArray compress method to deflate.
	 
	 ]]></description>
<author><![CDATA[David Chang
	 ]]></author>
<private><![CDATA[]]></private>
</classRec>
<method name='Deflater' fullname='com.adobe.flascc.vfs.zip:Deflater/Deflater' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new deflater.
		 ]]></description>
</method>
<method name='deflate' fullname='com.adobe.flascc.vfs.zip:Deflater/deflate' isStatic='false' isFinal='false' isOverride='false'  param_names='output' param_types='flash.utils:ByteArray' param_defaults='undefined' result_type='uint'>
<description><![CDATA[
		 Deflates the current input block to the given array.
		 
		 ]]></description>
<param><![CDATA[output the buffer where to write the compressed data.
		 ]]></param>
</method>
<method name='getBytesRead' fullname='com.adobe.flascc.vfs.zip:Deflater/getBytesRead' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
		 Gets the number of input bytes.
		 ]]></description>
</method>
<method name='getBytesWritten' fullname='com.adobe.flascc.vfs.zip:Deflater/getBytesWritten' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
		 Gets the number of output bytes.
		 ]]></description>
</method>
<method name='reset' fullname='com.adobe.flascc.vfs.zip:Deflater/reset' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ 
		 Resets the deflater.  The deflater acts afterwards as if it was
		 just created.
		 ]]></description>
</method>
<method name='setInput' fullname='com.adobe.flascc.vfs.zip:Deflater/setInput' isStatic='false' isFinal='false' isOverride='false'  param_names='input' param_types='flash.utils:ByteArray' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the data which should be compressed next.
		 
		 ]]></description>
<param><![CDATA[input the buffer containing the input data.
		 ]]></param>
</method>
<field name='buf' fullname='com.adobe.flascc.vfs.zip:Deflater/private:buf' type='flash.utils:ByteArray' isStatic='false' isConst='false' >
</field>
<field name='compressed' fullname='com.adobe.flascc.vfs.zip:Deflater/private:compressed' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='totalIn' fullname='com.adobe.flascc.vfs.zip:Deflater/private:totalIn' type='uint' isStatic='false' isConst='false' >
</field>
<field name='totalOut' fullname='com.adobe.flascc.vfs.zip:Deflater/private:totalOut' type='uint' isStatic='false' isConst='false' >
</field>
<classRec name='ZipConstants' fullname='com.adobe.flascc.vfs.zip:ZipConstants' sourcefile='F:\crossbridge\posix\vfs\nochump\util\zip\ZipConstants.as' namespace='com.adobe.flascc.vfs.zip' access='internal' baseclass='Object' isFinal='false' isDynamic='false' >
</classRec>
<field name='CENHDR' fullname='com.adobe.flascc.vfs.zip:ZipConstants/com.adobe.flascc.vfs.zip:CENHDR' type='uint' isStatic='true' isConst='true' defaultValue='46' >
</field>
<field name='CENNAM' fullname='com.adobe.flascc.vfs.zip:ZipConstants/com.adobe.flascc.vfs.zip:CENNAM' type='uint' isStatic='true' isConst='true' defaultValue='28' >
</field>
<field name='CENOFF' fullname='com.adobe.flascc.vfs.zip:ZipConstants/com.adobe.flascc.vfs.zip:CENOFF' type='uint' isStatic='true' isConst='true' defaultValue='42' >
</field>
<field name='CENSIG' fullname='com.adobe.flascc.vfs.zip:ZipConstants/com.adobe.flascc.vfs.zip:CENSIG' type='uint' isStatic='true' isConst='true' defaultValue='0x02014b50' >
</field>
<field name='CENVER' fullname='com.adobe.flascc.vfs.zip:ZipConstants/com.adobe.flascc.vfs.zip:CENVER' type='uint' isStatic='true' isConst='true' defaultValue='6' >
</field>
<field name='DEFLATED' fullname='com.adobe.flascc.vfs.zip:ZipConstants/com.adobe.flascc.vfs.zip:DEFLATED' type='uint' isStatic='true' isConst='true' defaultValue='8' >
</field>
<field name='ENDHDR' fullname='com.adobe.flascc.vfs.zip:ZipConstants/com.adobe.flascc.vfs.zip:ENDHDR' type='uint' isStatic='true' isConst='true' defaultValue='22' >
</field>
<field name='ENDOFF' fullname='com.adobe.flascc.vfs.zip:ZipConstants/com.adobe.flascc.vfs.zip:ENDOFF' type='uint' isStatic='true' isConst='true' defaultValue='16' >
</field>
<field name='ENDSIG' fullname='com.adobe.flascc.vfs.zip:ZipConstants/com.adobe.flascc.vfs.zip:ENDSIG' type='uint' isStatic='true' isConst='true' defaultValue='0x06054b50' >
</field>
<field name='ENDTOT' fullname='com.adobe.flascc.vfs.zip:ZipConstants/com.adobe.flascc.vfs.zip:ENDTOT' type='uint' isStatic='true' isConst='true' defaultValue='10' >
</field>
<field name='EXTHDR' fullname='com.adobe.flascc.vfs.zip:ZipConstants/com.adobe.flascc.vfs.zip:EXTHDR' type='uint' isStatic='true' isConst='true' defaultValue='16' >
</field>
<field name='EXTSIG' fullname='com.adobe.flascc.vfs.zip:ZipConstants/com.adobe.flascc.vfs.zip:EXTSIG' type='uint' isStatic='true' isConst='true' defaultValue='0x08074b50' >
</field>
<field name='LOCHDR' fullname='com.adobe.flascc.vfs.zip:ZipConstants/com.adobe.flascc.vfs.zip:LOCHDR' type='uint' isStatic='true' isConst='true' defaultValue='30' >
</field>
<field name='LOCNAM' fullname='com.adobe.flascc.vfs.zip:ZipConstants/com.adobe.flascc.vfs.zip:LOCNAM' type='uint' isStatic='true' isConst='true' defaultValue='26' >
</field>
<field name='LOCSIG' fullname='com.adobe.flascc.vfs.zip:ZipConstants/com.adobe.flascc.vfs.zip:LOCSIG' type='uint' isStatic='true' isConst='true' defaultValue='0x04034b50' >
</field>
<field name='LOCVER' fullname='com.adobe.flascc.vfs.zip:ZipConstants/com.adobe.flascc.vfs.zip:LOCVER' type='uint' isStatic='true' isConst='true' defaultValue='4' >
</field>
<field name='STORED' fullname='com.adobe.flascc.vfs.zip:ZipConstants/com.adobe.flascc.vfs.zip:STORED' type='uint' isStatic='true' isConst='true' defaultValue='0' >
</field>
<classRec name='Inflater' fullname='com.adobe.flascc.vfs.zip:Inflater' sourcefile='F:\crossbridge\posix\vfs\nochump\util\zip\Inflater.as' namespace='com.adobe.flascc.vfs.zip' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Inflater is used to decompress data that has been compressed according 
	 to the "deflate" standard described in rfc1950.
	 	 The usage is as following.  First you have to set some input with
	 <code>setInput()</code>, then inflate() it.
	 
	 This implementation is a port of Puff by Mark Addler that comes with
	 the zlip data compression library.  It is not the fastest routine as
	 he intended it for learning purposes, his actual optimized inflater code
	 is very different.  I went with this approach basically because I got a
	 headache looking at the optimized inflater code and porting this
	 was a breeze.  The speed should be adequate but there is plenty of room
	 for improvements here.
	 
	 ]]></description>
<author><![CDATA[dchang
	 ]]></author>
<private><![CDATA[]]></private>
</classRec>
<method name='Inflater' fullname='com.adobe.flascc.vfs.zip:Inflater/Inflater' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
</method>
<method name='bits' fullname='com.adobe.flascc.vfs.zip:Inflater/private:bits' isStatic='false' isFinal='false' isOverride='false'  param_names='need' param_types='int' param_defaults='undefined' result_type='int'>
</method>
<method name='codes' fullname='com.adobe.flascc.vfs.zip:Inflater/private:codes' isStatic='false' isFinal='false' isOverride='false'  param_names='buf' param_types='flash.utils:ByteArray' param_defaults='undefined' result_type='int'>
</method>
<method name='constructDynamicTables' fullname='com.adobe.flascc.vfs.zip:Inflater/private:constructDynamicTables' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
</method>
<method name='constructFixedTables' fullname='com.adobe.flascc.vfs.zip:Inflater/private:constructFixedTables' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='construct' fullname='com.adobe.flascc.vfs.zip:Inflater/private:construct' isStatic='false' isFinal='false' isOverride='false'  param_names='h;length;n' param_types='Object;Array;int' param_defaults='undefined;undefined;undefined' result_type='int'>
</method>
<method name='decode' fullname='com.adobe.flascc.vfs.zip:Inflater/private:decode' isStatic='false' isFinal='false' isOverride='false'  param_names='h' param_types='Object' param_defaults='undefined' result_type='int'>
</method>
<method name='inflate' fullname='com.adobe.flascc.vfs.zip:Inflater/inflate' isStatic='false' isFinal='false' isOverride='false'  param_names='buf' param_types='flash.utils:ByteArray' param_defaults='undefined' result_type='uint'>
<description><![CDATA[
		 Inflates the compressed stream to the output buffer.
		 
		 ]]></description>
<param><![CDATA[buf the output buffer.
		 ]]></param>
</method>
<method name='setInput' fullname='com.adobe.flascc.vfs.zip:Inflater/setInput' isStatic='false' isFinal='false' isOverride='false'  param_names='buf' param_types='flash.utils:ByteArray' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the input.
		 
		 ]]></description>
<param><![CDATA[buf the input.
		 ]]></param>
</method>
<method name='stored' fullname='com.adobe.flascc.vfs.zip:Inflater/private:stored' isStatic='false' isFinal='false' isOverride='false'  param_names='buf' param_types='flash.utils:ByteArray' param_defaults='undefined' result_type='void'>
</method>
<field name='DEXT' fullname='com.adobe.flascc.vfs.zip:Inflater/private:DEXT' type='Array' isStatic='true' isConst='true' defaultValue='unknown' >
</field>
<field name='DISTS' fullname='com.adobe.flascc.vfs.zip:Inflater/private:DISTS' type='Array' isStatic='true' isConst='true' defaultValue='unknown' >
</field>
<field name='FIXLCODES' fullname='com.adobe.flascc.vfs.zip:Inflater/private:FIXLCODES' type='int' isStatic='true' isConst='true' defaultValue='288' >
</field>
<field name='LENS' fullname='com.adobe.flascc.vfs.zip:Inflater/private:LENS' type='Array' isStatic='true' isConst='true' defaultValue='unknown' >
</field>
<field name='LEXT' fullname='com.adobe.flascc.vfs.zip:Inflater/private:LEXT' type='Array' isStatic='true' isConst='true' defaultValue='unknown' >
</field>
<field name='MAXBITS' fullname='com.adobe.flascc.vfs.zip:Inflater/private:MAXBITS' type='int' isStatic='true' isConst='true' defaultValue='15' >
</field>
<field name='MAXCODES' fullname='com.adobe.flascc.vfs.zip:Inflater/private:MAXCODES' type='int' isStatic='true' isConst='true' defaultValue='316.0' >
</field>
<field name='MAXDCODES' fullname='com.adobe.flascc.vfs.zip:Inflater/private:MAXDCODES' type='int' isStatic='true' isConst='true' defaultValue='30' >
</field>
<field name='MAXLCODES' fullname='com.adobe.flascc.vfs.zip:Inflater/private:MAXLCODES' type='int' isStatic='true' isConst='true' defaultValue='286' >
</field>
<field name='bitbuf' fullname='com.adobe.flascc.vfs.zip:Inflater/private:bitbuf' type='int' isStatic='false' isConst='false' >
</field>
<field name='bitcnt' fullname='com.adobe.flascc.vfs.zip:Inflater/private:bitcnt' type='int' isStatic='false' isConst='false' >
</field>
<field name='distcode' fullname='com.adobe.flascc.vfs.zip:Inflater/private:distcode' type='Object' isStatic='false' isConst='false' >
</field>
<field name='inbuf' fullname='com.adobe.flascc.vfs.zip:Inflater/private:inbuf' type='flash.utils:ByteArray' isStatic='false' isConst='false' >
</field>
<field name='incnt' fullname='com.adobe.flascc.vfs.zip:Inflater/private:incnt' type='uint' isStatic='false' isConst='false' >
</field>
<field name='lencode' fullname='com.adobe.flascc.vfs.zip:Inflater/private:lencode' type='Object' isStatic='false' isConst='false' >
</field>
<classRec name='ZipEntry' fullname='com.adobe.flascc.vfs.zip:ZipEntry' sourcefile='F:\crossbridge\posix\vfs\nochump\util\zip\ZipEntry.as' namespace='com.adobe.flascc.vfs.zip' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 This class represents a member of a zip archive.  ZipFile
	 will give you instances of this class as information
	 about the members in an archive.  On the other hand ZipOutput
	 needs an instance of this class to create a new member.
	 	 ]]></description>
<author><![CDATA[David Chang
	 ]]></author>
<private><![CDATA[]]></private>
</classRec>
<method name='ZipEntry' fullname='com.adobe.flascc.vfs.zip:ZipEntry/ZipEntry' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Creates a zip entry with the given name.
		 ]]></description>
<param><![CDATA[name the name. May include directory components separated
		 by '/'.
		 ]]></param>
</method>
<method name='isDirectory' fullname='com.adobe.flascc.vfs.zip:ZipEntry/isDirectory' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Gets true, if the entry is a directory.  This is solely
		 determined by the name, a trailing slash '/' marks a directory.  
		 ]]></description>
</method>
<method name='toString' fullname='com.adobe.flascc.vfs.zip:ZipEntry/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 Gets the string representation of this ZipEntry.  This is just
		 the name as returned by name.
		 ]]></description>
</method>
<method name='comment' fullname='com.adobe.flascc.vfs.zip:ZipEntry/comment/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 Gets the extra data.
		 ]]></description>
</method>
<method name='compressedSize' fullname='com.adobe.flascc.vfs.zip:ZipEntry/compressedSize/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 Gets the size of the compressed data.
		 ]]></description>
</method>
<method name='crc' fullname='com.adobe.flascc.vfs.zip:ZipEntry/crc/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
		 Gets the crc of the uncompressed data.
		 ]]></description>
</method>
<method name='extra' fullname='com.adobe.flascc.vfs.zip:ZipEntry/extra/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.utils:ByteArray'>
<description><![CDATA[
		 Gets the extra data.
		 ]]></description>
</method>
<method name='method' fullname='com.adobe.flascc.vfs.zip:ZipEntry/method/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 Gets the compression method. 
		 ]]></description>
</method>
<method name='name' fullname='com.adobe.flascc.vfs.zip:ZipEntry/name/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 Returns the entry name.  The path components in the entry are
		 always separated by slashes ('/').  
		 ]]></description>
</method>
<method name='size' fullname='com.adobe.flascc.vfs.zip:ZipEntry/size/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 Gets the size of the uncompressed data.
		 ]]></description>
</method>
<method name='time' fullname='com.adobe.flascc.vfs.zip:ZipEntry/time/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
		 Gets the time of last modification of the entry.
		 ]]></description>
<return><![CDATA[the time of last modification of the entry, or -1 if unknown.
		 ]]></return>
</method>
<method name='comment' fullname='com.adobe.flascc.vfs.zip:ZipEntry/comment/set' isStatic='false' isFinal='false' isOverride='false'  param_names='comment' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the entry comment.
		 ]]></description>
</method>
<method name='compressedSize' fullname='com.adobe.flascc.vfs.zip:ZipEntry/compressedSize/set' isStatic='false' isFinal='false' isOverride='false'  param_names='csize' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the size of the compressed data.
		 ]]></description>
</method>
<method name='crc' fullname='com.adobe.flascc.vfs.zip:ZipEntry/crc/set' isStatic='false' isFinal='false' isOverride='false'  param_names='crc' param_types='uint' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the crc of the uncompressed data.
		 ]]></description>
</method>
<method name='extra' fullname='com.adobe.flascc.vfs.zip:ZipEntry/extra/set' isStatic='false' isFinal='false' isOverride='false'  param_names='extra' param_types='flash.utils:ByteArray' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the extra data.
		 ]]></description>
</method>
<method name='method' fullname='com.adobe.flascc.vfs.zip:ZipEntry/method/set' isStatic='false' isFinal='false' isOverride='false'  param_names='method' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the compression method.  Only DEFLATED and STORED are
		 supported.
		 ]]></description>
</method>
<method name='size' fullname='com.adobe.flascc.vfs.zip:ZipEntry/size/set' isStatic='false' isFinal='false' isOverride='false'  param_names='size' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the size of the uncompressed data.
		 ]]></description>
</method>
<method name='time' fullname='com.adobe.flascc.vfs.zip:ZipEntry/time/set' isStatic='false' isFinal='false' isOverride='false'  param_names='time' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the time of last modification of the entry.
		 ]]></description>
<time><![CDATA[the time of last modification of the entry.
		 ]]></time>
</method>
<field name='_comment' fullname='com.adobe.flascc.vfs.zip:ZipEntry/private:_comment' type='String' isStatic='false' isConst='false' >
</field>
<field name='_compressedSize' fullname='com.adobe.flascc.vfs.zip:ZipEntry/private:_compressedSize' type='int' isStatic='false' isConst='false' defaultValue='-1' >
</field>
<field name='_crc' fullname='com.adobe.flascc.vfs.zip:ZipEntry/private:_crc' type='uint' isStatic='false' isConst='false' >
</field>
<field name='_extra' fullname='com.adobe.flascc.vfs.zip:ZipEntry/private:_extra' type='flash.utils:ByteArray' isStatic='false' isConst='false' >
</field>
<field name='_method' fullname='com.adobe.flascc.vfs.zip:ZipEntry/private:_method' type='int' isStatic='false' isConst='false' defaultValue='-1' >
</field>
<field name='_name' fullname='com.adobe.flascc.vfs.zip:ZipEntry/private:_name' type='String' isStatic='false' isConst='false' >
</field>
<field name='_size' fullname='com.adobe.flascc.vfs.zip:ZipEntry/private:_size' type='int' isStatic='false' isConst='false' defaultValue='-1' >
</field>
<field name='dostime' fullname='com.adobe.flascc.vfs.zip:ZipEntry/com.adobe.flascc.vfs.zip:dostime' type='uint' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='flag' fullname='com.adobe.flascc.vfs.zip:ZipEntry/com.adobe.flascc.vfs.zip:flag' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='offset' fullname='com.adobe.flascc.vfs.zip:ZipEntry/com.adobe.flascc.vfs.zip:offset' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='version' fullname='com.adobe.flascc.vfs.zip:ZipEntry/com.adobe.flascc.vfs.zip:version' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='ZipOutput' fullname='com.adobe.flascc.vfs.zip:ZipOutput' sourcefile='F:\crossbridge\posix\vfs\nochump\util\zip\ZipOutput.as' namespace='com.adobe.flascc.vfs.zip' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='ZipOutput' fullname='com.adobe.flascc.vfs.zip:ZipOutput/ZipOutput' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
</method>
<method name='closeEntry' fullname='com.adobe.flascc.vfs.zip:ZipOutput/closeEntry' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='finish' fullname='com.adobe.flascc.vfs.zip:ZipOutput/finish' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='putNextEntry' fullname='com.adobe.flascc.vfs.zip:ZipOutput/putNextEntry' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='com.adobe.flascc.vfs.zip:ZipEntry' param_defaults='undefined' result_type='void'>
</method>
<method name='writeCEN' fullname='com.adobe.flascc.vfs.zip:ZipOutput/private:writeCEN' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='com.adobe.flascc.vfs.zip:ZipEntry' param_defaults='undefined' result_type='void'>
</method>
<method name='writeEND' fullname='com.adobe.flascc.vfs.zip:ZipOutput/private:writeEND' isStatic='false' isFinal='false' isOverride='false'  param_names='off;len' param_types='uint;uint' param_defaults='undefined;undefined' result_type='void'>
</method>
<method name='writeEXT' fullname='com.adobe.flascc.vfs.zip:ZipOutput/private:writeEXT' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='com.adobe.flascc.vfs.zip:ZipEntry' param_defaults='undefined' result_type='void'>
</method>
<method name='writeLOC' fullname='com.adobe.flascc.vfs.zip:ZipOutput/private:writeLOC' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='com.adobe.flascc.vfs.zip:ZipEntry' param_defaults='undefined' result_type='void'>
</method>
<method name='write' fullname='com.adobe.flascc.vfs.zip:ZipOutput/write' isStatic='false' isFinal='false' isOverride='false'  param_names='b' param_types='flash.utils:ByteArray' param_defaults='undefined' result_type='void'>
</method>
<method name='byteArray' fullname='com.adobe.flascc.vfs.zip:ZipOutput/byteArray/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.utils:ByteArray'>
<description><![CDATA[
		 Returns the byte array of the finished zip.
		 ]]></description>
</method>
<method name='size' fullname='com.adobe.flascc.vfs.zip:ZipOutput/size/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
		 Returns the number of entries in this zip file.
		 ]]></description>
</method>
<method name='comment' fullname='com.adobe.flascc.vfs.zip:ZipOutput/comment/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 		 ]]></description>
</method>
<field name='_buf' fullname='com.adobe.flascc.vfs.zip:ZipOutput/private:_buf' type='flash.utils:ByteArray' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='_comment' fullname='com.adobe.flascc.vfs.zip:ZipOutput/private:_comment' type='String' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='_crc' fullname='com.adobe.flascc.vfs.zip:ZipOutput/private:_crc' type='com.adobe.flascc.vfs.zip:CRC32' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='_def' fullname='com.adobe.flascc.vfs.zip:ZipOutput/private:_def' type='com.adobe.flascc.vfs.zip:Deflater' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='_entries' fullname='com.adobe.flascc.vfs.zip:ZipOutput/private:_entries' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='_entry' fullname='com.adobe.flascc.vfs.zip:ZipOutput/private:_entry' type='com.adobe.flascc.vfs.zip:ZipEntry' isStatic='false' isConst='false' >
</field>
<field name='_names' fullname='com.adobe.flascc.vfs.zip:ZipOutput/private:_names' type='flash.utils:Dictionary' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<classRec name='ZipError' fullname='com.adobe.flascc.vfs.zip:ZipError' sourcefile='F:\crossbridge\posix\vfs\nochump\util\zip\ZipError.as' namespace='com.adobe.flascc.vfs.zip' access='public' baseclass='flash.errors:IOError' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Thrown during the creation or input of a zip file.
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='ZipError' fullname='com.adobe.flascc.vfs.zip:ZipError/ZipError' isStatic='false' isFinal='false' isOverride='false'  param_names='message;id' param_types='String;int' param_defaults=';0' result_type='*'>
</method>
<interfaceRec name='IKernel' fullname='com.adobe.flascc.kernel:IKernel' sourcefile='F:\crossbridge\posix\IKernel_asdocs.as' namespace='com.adobe.flascc.kernel' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[ This interface exposes all of the FreeBSD kernel system calls. To provide reasonable implementations you will need to look at the BSD documentation and also at the BSD libc source code.]]></description>
</interfaceRec>
<method name='__getcwd' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:__getcwd' isStatic='false' isFinal='false' isOverride='false'  param_names='A_buf;A_buflen;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='access' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:access' isStatic='false' isFinal='false' isOverride='false'  param_names='A_path;A_flags;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='chdir' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:chdir' isStatic='false' isFinal='false' isOverride='false'  param_names='A_path;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='chmod' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:chmod' isStatic='false' isFinal='false' isOverride='false'  param_names='A_path;A_mode;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='chown' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:chown' isStatic='false' isFinal='false' isOverride='false'  param_names='A_path;A_uid;A_gid;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='chroot' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:chroot' isStatic='false' isFinal='false' isOverride='false'  param_names='A_path;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='clock_gettime' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:clock_gettime' isStatic='false' isFinal='false' isOverride='false'  param_names='A_clock_id;A_tp;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='close' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:close' isStatic='false' isFinal='false' isOverride='false'  param_names='A_fd;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='dup2' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:dup2' isStatic='false' isFinal='false' isOverride='false'  param_names='A_from;A_to;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='dup' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:dup' isStatic='false' isFinal='false' isOverride='false'  param_names='A_fd;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='fchdir' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:fchdir' isStatic='false' isFinal='false' isOverride='false'  param_names='A_fd;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='fchmod' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:fchmod' isStatic='false' isFinal='false' isOverride='false'  param_names='A_fd;A_mode;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='fchown' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:fchown' isStatic='false' isFinal='false' isOverride='false'  param_names='A_fd;A_uid;A_gid;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='fcntl' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:fcntl' isStatic='false' isFinal='false' isOverride='false'  param_names='A_fd;A_cmd;A_arg;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='fork' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:fork' isStatic='false' isFinal='false' isOverride='false'  param_names='errnoPtr' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='fpathconf' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:fpathconf' isStatic='false' isFinal='false' isOverride='false'  param_names='A_fd;A_name;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='fstat' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:fstat' isStatic='false' isFinal='false' isOverride='false'  param_names='A_fd;A_sb;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='fsync' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:fsync' isStatic='false' isFinal='false' isOverride='false'  param_names='A_fd;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='getdirentries' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:getdirentries' isStatic='false' isFinal='false' isOverride='false'  param_names='A_fd;A_buf;A_count;A_basep;errnoPtr' param_types='int;int;int;int;int' param_defaults='undefined;undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='getdtablesize' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:getdtablesize' isStatic='false' isFinal='false' isOverride='false'  param_names='errnoPtr' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='getegid' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:getegid' isStatic='false' isFinal='false' isOverride='false'  param_names='errnoPtr' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='geteuid' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:geteuid' isStatic='false' isFinal='false' isOverride='false'  param_names='errnoPtr' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='getgid' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:getgid' isStatic='false' isFinal='false' isOverride='false'  param_names='errnoPtr' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='getgroups' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:getgroups' isStatic='false' isFinal='false' isOverride='false'  param_names='A_gidsetsize;A_gidset;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='getpgid' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:getpgid' isStatic='false' isFinal='false' isOverride='false'  param_names='A_pid;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='getpgrp' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:getpgrp' isStatic='false' isFinal='false' isOverride='false'  param_names='errnoPtr' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='getpid' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:getpid' isStatic='false' isFinal='false' isOverride='false'  param_names='errnoPtr' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='getppid' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:getppid' isStatic='false' isFinal='false' isOverride='false'  param_names='errnoPtr' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='getpriority' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:getpriority' isStatic='false' isFinal='false' isOverride='false'  param_names='A_which;A_who;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='getrusage' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:getrusage' isStatic='false' isFinal='false' isOverride='false'  param_names='A_who;A_rusage;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='getsid' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:getsid' isStatic='false' isFinal='false' isOverride='false'  param_names='A_pid;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='getsockopt' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:getsockopt' isStatic='false' isFinal='false' isOverride='false'  param_names='A_s;A_level;A_name;A_val;A_avalsize;errnoPtr' param_types='int;int;int;int;int;int' param_defaults='undefined;undefined;undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='getuid' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:getuid' isStatic='false' isFinal='false' isOverride='false'  param_names='errnoPtr' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='ioctl' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:ioctl' isStatic='false' isFinal='false' isOverride='false'  param_names='A_fd;A_com;A_data;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='issetugid' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:issetugid' isStatic='false' isFinal='false' isOverride='false'  param_names='errnoPtr' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='kill' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:kill' isStatic='false' isFinal='false' isOverride='false'  param_names='A_pid;A_signum;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='lchown' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:lchown' isStatic='false' isFinal='false' isOverride='false'  param_names='A_path;A_uid;A_gid;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='link' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:link' isStatic='false' isFinal='false' isOverride='false'  param_names='A_path;A_linkpath;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='listen' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:listen' isStatic='false' isFinal='false' isOverride='false'  param_names='A_s;A_backlog;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='lseek' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:lseek' isStatic='false' isFinal='false' isOverride='false'  param_names='A_fd;A_offset_high;A_offset_low;A_whence;errnoPtr' param_types='int;int;int;int;int' param_defaults='undefined;undefined;undefined;undefined;undefined' result_type='Object'>
<description><![CDATA[
		]]></description>
</method>
<method name='lstat' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:lstat' isStatic='false' isFinal='false' isOverride='false'  param_names='A_path;A_ub;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='mkdir' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:mkdir' isStatic='false' isFinal='false' isOverride='false'  param_names='A_path;A_mode;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='mkfifo' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:mkfifo' isStatic='false' isFinal='false' isOverride='false'  param_names='A_path;A_mode;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='msgget' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:msgget' isStatic='false' isFinal='false' isOverride='false'  param_names='A_key;A_msgflg;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='msgrcv' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:msgrcv' isStatic='false' isFinal='false' isOverride='false'  param_names='A_msqid;A_msgp;A_msgsz;A_msgtyp;A_msgflg;errnoPtr' param_types='int;int;int;int;int;int' param_defaults='undefined;undefined;undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='msgsnd' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:msgsnd' isStatic='false' isFinal='false' isOverride='false'  param_names='A_msqid;A_msgp;A_msgsz;A_msgflg;errnoPtr' param_types='int;int;int;int;int' param_defaults='undefined;undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='msync' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:msync' isStatic='false' isFinal='false' isOverride='false'  param_names='A_addr;A_len;A_flags;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='nanosleep' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:nanosleep' isStatic='false' isFinal='false' isOverride='false'  param_names='A_rqtp;A_rmtp;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='open' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:open' isStatic='false' isFinal='false' isOverride='false'  param_names='A_path;A_flags;A_mode;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='pathconf' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:pathconf' isStatic='false' isFinal='false' isOverride='false'  param_names='A_path;A_name;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='pipe' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:pipe' isStatic='false' isFinal='false' isOverride='false'  param_names='A_fildes;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='pselect' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:pselect' isStatic='false' isFinal='false' isOverride='false'  param_names='A_nd;A_in;A_ou;A_ex;A_ts;A_sm;errnoPtr' param_types='int;int;int;int;int;int;int' param_defaults='undefined;undefined;undefined;undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='read' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:read' isStatic='false' isFinal='false' isOverride='false'  param_names='A_fd;A_buf;A_nbyte;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='readv' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:readv' isStatic='false' isFinal='false' isOverride='false'  param_names='A_fd;A_iovp;A_iovcnt;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='rename' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:rename' isStatic='false' isFinal='false' isOverride='false'  param_names='A_from;A_to;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='revoke' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:revoke' isStatic='false' isFinal='false' isOverride='false'  param_names='A_path;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='rmdir' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:rmdir' isStatic='false' isFinal='false' isOverride='false'  param_names='A_path;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='sched_get_priority_max' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:sched_get_priority_max' isStatic='false' isFinal='false' isOverride='false'  param_names='A_policy;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='sched_get_priority_min' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:sched_get_priority_min' isStatic='false' isFinal='false' isOverride='false'  param_names='A_policy;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='sched_yield' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:sched_yield' isStatic='false' isFinal='false' isOverride='false'  param_names='errnoPtr' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='semget' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:semget' isStatic='false' isFinal='false' isOverride='false'  param_names='A_key;A_nsems;A_semflg;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='setegid' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:setegid' isStatic='false' isFinal='false' isOverride='false'  param_names='A_egid;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='seteuid' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:seteuid' isStatic='false' isFinal='false' isOverride='false'  param_names='A_euid;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='setgid' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:setgid' isStatic='false' isFinal='false' isOverride='false'  param_names='A_gid;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='setgroups' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:setgroups' isStatic='false' isFinal='false' isOverride='false'  param_names='A_gidsetsize;A_gidset;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='setpgid' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:setpgid' isStatic='false' isFinal='false' isOverride='false'  param_names='A_pid;A_pgid;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='setpriority' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:setpriority' isStatic='false' isFinal='false' isOverride='false'  param_names='A_which;A_who;A_prio;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='setregid' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:setregid' isStatic='false' isFinal='false' isOverride='false'  param_names='A_rgid;A_egid;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='setreuid' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:setreuid' isStatic='false' isFinal='false' isOverride='false'  param_names='A_ruid;A_euid;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='setsid' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:setsid' isStatic='false' isFinal='false' isOverride='false'  param_names='errnoPtr' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='setsockopt' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:setsockopt' isStatic='false' isFinal='false' isOverride='false'  param_names='A_s;A_level;A_name;A_val;A_valsize;errnoPtr' param_types='int;int;int;int;int;int' param_defaults='undefined;undefined;undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='setuid' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:setuid' isStatic='false' isFinal='false' isOverride='false'  param_names='A_uid;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='shm_unlink' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:shm_unlink' isStatic='false' isFinal='false' isOverride='false'  param_names='A_path;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='shmdt' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:shmdt' isStatic='false' isFinal='false' isOverride='false'  param_names='A_shmaddr;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='shmget' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:shmget' isStatic='false' isFinal='false' isOverride='false'  param_names='A_key;A_size;A_shmflg;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='shutdown' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:shutdown' isStatic='false' isFinal='false' isOverride='false'  param_names='A_s;A_how;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='sigpending' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:sigpending' isStatic='false' isFinal='false' isOverride='false'  param_names='A_set;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='sigprocmask' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:sigprocmask' isStatic='false' isFinal='false' isOverride='false'  param_names='A_how;A_set;A_oset;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='sigsuspend' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:sigsuspend' isStatic='false' isFinal='false' isOverride='false'  param_names='A_mask;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='sigwait' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:sigwait' isStatic='false' isFinal='false' isOverride='false'  param_names='A_set;A_sig;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='socket' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:socket' isStatic='false' isFinal='false' isOverride='false'  param_names='A_domain;A_type;A_protocol;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='socketpair' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:socketpair' isStatic='false' isFinal='false' isOverride='false'  param_names='A_domain;A_type;A_protocol;A_rsv;errnoPtr' param_types='int;int;int;int;int' param_defaults='undefined;undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='stat' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:stat' isStatic='false' isFinal='false' isOverride='false'  param_names='A_path;A_ub;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='symlink' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:symlink' isStatic='false' isFinal='false' isOverride='false'  param_names='A_path;A_link;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='sync' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:sync' isStatic='false' isFinal='false' isOverride='false'  param_names='errnoPtr' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		]]></description>
</method>
<method name='umask' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:umask' isStatic='false' isFinal='false' isOverride='false'  param_names='A_newmask;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='unlink' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:unlink' isStatic='false' isFinal='false' isOverride='false'  param_names='A_path;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='vfork' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:vfork' isStatic='false' isFinal='false' isOverride='false'  param_names='errnoPtr' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='wait4' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:wait4' isStatic='false' isFinal='false' isOverride='false'  param_names='A_pid;A_status;A_options;A_rusage;errnoPtr' param_types='int;int;int;int;int' param_defaults='undefined;undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='write' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:write' isStatic='false' isFinal='false' isOverride='false'  param_names='A_fd;A_buf;A_nbyte;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<method name='writev' fullname='com.adobe.flascc.kernel:IKernel/com.adobe.flascc.kernel:IKernel:writev' isStatic='false' isFinal='false' isOverride='false'  param_names='A_fd;A_iovp;A_iovcnt;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
		]]></description>
</method>
<classRec name='KernelConstants' fullname='com.adobe.flascc.kernel:KernelConstants' sourcefile='F:\crossbridge\posix\PlayerKernel.as' namespace='com.adobe.flascc.kernel' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
    This helper class contains constant values defined in the libc headers.
    ]]></description>
</classRec>
<classRec name='PlayerKernel' fullname='com.adobe.flascc.kernel:PlayerKernel' sourcefile='F:\crossbridge\posix\PlayerKernel.as' namespace='com.adobe.flascc.kernel' access='public' baseclass='Object' interfaces='com.adobe.flascc.kernel:IKernel' isFinal='false' isDynamic='false' >
<description><![CDATA[
    This is the default implementation of the Posix interface. Extending and
    overriding methods in this class allow you to customize the handling
    of the basic syscalls on top of which libc operates.
    ]]></description>
</classRec>
<method name='PlayerKernel' fullname='com.adobe.flascc.kernel:PlayerKernel/PlayerKernel' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
        Construct the default IKernel implementation used by flascc. If an alternate
        implementation has not already been assigned to the CModule.kernel property,
        then this class will be constructed on first access.
        ]]></description>
</method>
<method name='__getcwd' fullname='com.adobe.flascc.kernel:PlayerKernel/__getcwd' isStatic='false' isFinal='false' isOverride='false'  param_names='buf;size;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
</method>
<method name='access' fullname='com.adobe.flascc.kernel:PlayerKernel/access' isStatic='false' isFinal='false' isOverride='false'  param_names='path;flags;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
</method>
<method name='chdir' fullname='com.adobe.flascc.kernel:PlayerKernel/chdir' isStatic='false' isFinal='false' isOverride='false'  param_names='A_path;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='chmod' fullname='com.adobe.flascc.kernel:PlayerKernel/chmod' isStatic='false' isFinal='false' isOverride='false'  param_names='A_path;A_mode;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='chown' fullname='com.adobe.flascc.kernel:PlayerKernel/chown' isStatic='false' isFinal='false' isOverride='false'  param_names='A_path;A_uid;A_gid;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='chroot' fullname='com.adobe.flascc.kernel:PlayerKernel/chroot' isStatic='false' isFinal='false' isOverride='false'  param_names='A_path;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='clock_gettime' fullname='com.adobe.flascc.kernel:PlayerKernel/clock_gettime' isStatic='false' isFinal='false' isOverride='false'  param_names='A_clock_id;A_tp;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        TODO: ignores A_clock_id, assumes a value of CLOCK_REALTIME
        ]]></description>
</method>
<method name='close' fullname='com.adobe.flascc.kernel:PlayerKernel/close' isStatic='false' isFinal='false' isOverride='false'  param_names='fd;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
        ]]></description>
</method>
<method name='create' fullname='com.adobe.flascc.kernel:PlayerKernel/private:create' isStatic='false' isFinal='false' isOverride='false'  param_names='path' param_types='String' param_defaults='undefined' result_type='com.adobe.flascc.vfs:FileHandle'>
</method>
<method name='dup2' fullname='com.adobe.flascc.kernel:PlayerKernel/dup2' isStatic='false' isFinal='false' isOverride='false'  param_names='fd;fd2;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        ]]></description>
</method>
<method name='dup' fullname='com.adobe.flascc.kernel:PlayerKernel/dup' isStatic='false' isFinal='false' isOverride='false'  param_names='fd;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
        ]]></description>
</method>
<method name='fchdir' fullname='com.adobe.flascc.kernel:PlayerKernel/fchdir' isStatic='false' isFinal='false' isOverride='false'  param_names='A_fd;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='fchmod' fullname='com.adobe.flascc.kernel:PlayerKernel/fchmod' isStatic='false' isFinal='false' isOverride='false'  param_names='A_fd;A_mode;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='fchown' fullname='com.adobe.flascc.kernel:PlayerKernel/fchown' isStatic='false' isFinal='false' isOverride='false'  param_names='A_fd;A_uid;A_gid;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='fcntl' fullname='com.adobe.flascc.kernel:PlayerKernel/fcntl' isStatic='false' isFinal='false' isOverride='false'  param_names='fd;com;x;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        ]]></description>
</method>
<method name='fork' fullname='com.adobe.flascc.kernel:PlayerKernel/fork' isStatic='false' isFinal='false' isOverride='false'  param_names='errnoPtr' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='fpathconf' fullname='com.adobe.flascc.kernel:PlayerKernel/fpathconf' isStatic='false' isFinal='false' isOverride='false'  param_names='A_fd;A_name;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='fstat' fullname='com.adobe.flascc.kernel:PlayerKernel/fstat' isStatic='false' isFinal='false' isOverride='false'  param_names='fd;sb;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        ]]></description>
</method>
<method name='fsync' fullname='com.adobe.flascc.kernel:PlayerKernel/fsync' isStatic='false' isFinal='false' isOverride='false'  param_names='A_fd;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='getFileHandleFromFileDescriptor' fullname='com.adobe.flascc.kernel:PlayerKernel/private:getFileHandleFromFileDescriptor' isStatic='false' isFinal='false' isOverride='false'  param_names='fd;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='com.adobe.flascc.vfs:FileHandle'>
</method>
<method name='getdirentries' fullname='com.adobe.flascc.kernel:PlayerKernel/getdirentries' isStatic='false' isFinal='false' isOverride='false'  param_names='fd;buf;nbytes;basep;errnoPtr' param_types='int;int;int;int;int' param_defaults='undefined;undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        ]]></description>
</method>
<method name='getdtablesize' fullname='com.adobe.flascc.kernel:PlayerKernel/getdtablesize' isStatic='false' isFinal='false' isOverride='false'  param_names='errnoPtr' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='getegid' fullname='com.adobe.flascc.kernel:PlayerKernel/getegid' isStatic='false' isFinal='false' isOverride='false'  param_names='errnoPtr' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='geteuid' fullname='com.adobe.flascc.kernel:PlayerKernel/geteuid' isStatic='false' isFinal='false' isOverride='false'  param_names='errnoPtr' param_types='int' param_defaults='undefined' result_type='int'>
</method>
<method name='getgid' fullname='com.adobe.flascc.kernel:PlayerKernel/getgid' isStatic='false' isFinal='false' isOverride='false'  param_names='errnoPtr' param_types='int' param_defaults='undefined' result_type='int'>
</method>
<method name='getgroups' fullname='com.adobe.flascc.kernel:PlayerKernel/getgroups' isStatic='false' isFinal='false' isOverride='false'  param_names='A_gidsetsize;A_gidset;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='getpgid' fullname='com.adobe.flascc.kernel:PlayerKernel/getpgid' isStatic='false' isFinal='false' isOverride='false'  param_names='A_pid;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='getpgrp' fullname='com.adobe.flascc.kernel:PlayerKernel/getpgrp' isStatic='false' isFinal='false' isOverride='false'  param_names='errnoPtr' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='getpid' fullname='com.adobe.flascc.kernel:PlayerKernel/getpid' isStatic='false' isFinal='false' isOverride='false'  param_names='errnoPtr' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
        The default implementation always returns 42
        ]]></description>
</method>
<method name='getppid' fullname='com.adobe.flascc.kernel:PlayerKernel/getppid' isStatic='false' isFinal='false' isOverride='false'  param_names='errnoPtr' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='getpriority' fullname='com.adobe.flascc.kernel:PlayerKernel/getpriority' isStatic='false' isFinal='false' isOverride='false'  param_names='A_which;A_who;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='getrusage' fullname='com.adobe.flascc.kernel:PlayerKernel/getrusage' isStatic='false' isFinal='false' isOverride='false'  param_names='A_who;A_rusage;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='getsid' fullname='com.adobe.flascc.kernel:PlayerKernel/getsid' isStatic='false' isFinal='false' isOverride='false'  param_names='A_pid;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='getsockopt' fullname='com.adobe.flascc.kernel:PlayerKernel/getsockopt' isStatic='false' isFinal='false' isOverride='false'  param_names='A_s;A_level;A_name;A_val;A_avalsize;errnoPtr' param_types='int;int;int;int;int;int' param_defaults='undefined;undefined;undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='getuid' fullname='com.adobe.flascc.kernel:PlayerKernel/getuid' isStatic='false' isFinal='false' isOverride='false'  param_names='errnoPtr' param_types='int' param_defaults='undefined' result_type='int'>
</method>
<method name='ioctl' fullname='com.adobe.flascc.kernel:PlayerKernel/ioctl' isStatic='false' isFinal='false' isOverride='false'  param_names='fd;com;data;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        ]]></description>
</method>
<method name='iov' fullname='com.adobe.flascc.kernel:PlayerKernel/private:iov' isStatic='false' isFinal='false' isOverride='false'  param_names='fd;vecs;veccnt;errnoPtr;f' param_types='int;int;int;int;Function' param_defaults='undefined;undefined;undefined;undefined;undefined' result_type='int'>
</method>
<method name='issetugid' fullname='com.adobe.flascc.kernel:PlayerKernel/issetugid' isStatic='false' isFinal='false' isOverride='false'  param_names='errnoPtr' param_types='int' param_defaults='undefined' result_type='int'>
</method>
<method name='kill' fullname='com.adobe.flascc.kernel:PlayerKernel/kill' isStatic='false' isFinal='false' isOverride='false'  param_names='A_pid;A_signum;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
</method>
<method name='lchown' fullname='com.adobe.flascc.kernel:PlayerKernel/lchown' isStatic='false' isFinal='false' isOverride='false'  param_names='A_path;A_uid;A_gid;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='link' fullname='com.adobe.flascc.kernel:PlayerKernel/link' isStatic='false' isFinal='false' isOverride='false'  param_names='A_path;A_linkpath;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='listen' fullname='com.adobe.flascc.kernel:PlayerKernel/listen' isStatic='false' isFinal='false' isOverride='false'  param_names='A_s;A_backlog;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='lseekImpl' fullname='com.adobe.flascc.kernel:PlayerKernel/private:lseekImpl' isStatic='false' isFinal='false' isOverride='false'  param_names='fd;offset;whence;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='*'>
<description><![CDATA[
        Returns null on error, uint on success
        ]]></description>
</method>
<method name='lseek' fullname='com.adobe.flascc.kernel:PlayerKernel/lseek' isStatic='false' isFinal='false' isOverride='false'  param_names='fd;offset_high;offset_low;whence;errnoPtr' param_types='int;int;int;int;int' param_defaults='undefined;undefined;undefined;undefined;undefined' result_type='Object'>
<description><![CDATA[
        ]]></description>
</method>
<method name='lstat' fullname='com.adobe.flascc.kernel:PlayerKernel/lstat' isStatic='false' isFinal='false' isOverride='false'  param_names='path;ub;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        ]]></description>
</method>
<method name='mkdir' fullname='com.adobe.flascc.kernel:PlayerKernel/mkdir' isStatic='false' isFinal='false' isOverride='false'  param_names='path;mode;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        ]]></description>
</method>
<method name='mkfifo' fullname='com.adobe.flascc.kernel:PlayerKernel/mkfifo' isStatic='false' isFinal='false' isOverride='false'  param_names='A_path;A_mode;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='moveFiles' fullname='com.adobe.flascc.kernel:PlayerKernel/private:moveFiles' isStatic='false' isFinal='false' isOverride='false'  param_names='src;dst' param_types='String;String' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
        ]]></description>
</method>
<method name='msgget' fullname='com.adobe.flascc.kernel:PlayerKernel/msgget' isStatic='false' isFinal='false' isOverride='false'  param_names='A_key;A_msgflg;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='msgrcv' fullname='com.adobe.flascc.kernel:PlayerKernel/msgrcv' isStatic='false' isFinal='false' isOverride='false'  param_names='A_msqid;A_msgp;A_msgsz;A_msgtyp;A_msgflg;errnoPtr' param_types='int;int;int;int;int;int' param_defaults='undefined;undefined;undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='msgsnd' fullname='com.adobe.flascc.kernel:PlayerKernel/msgsnd' isStatic='false' isFinal='false' isOverride='false'  param_names='A_msqid;A_msgp;A_msgsz;A_msgflg;errnoPtr' param_types='int;int;int;int;int' param_defaults='undefined;undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='msync' fullname='com.adobe.flascc.kernel:PlayerKernel/msync' isStatic='false' isFinal='false' isOverride='false'  param_names='A_addr;A_len;A_flags;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='nanosleep' fullname='com.adobe.flascc.kernel:PlayerKernel/nanosleep' isStatic='false' isFinal='false' isOverride='false'  param_names='rqtp;rmtp;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
</method>
<method name='open' fullname='com.adobe.flascc.kernel:PlayerKernel/open' isStatic='false' isFinal='false' isOverride='false'  param_names='path;flags;mode;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        ]]></description>
</method>
<method name='pathconf' fullname='com.adobe.flascc.kernel:PlayerKernel/pathconf' isStatic='false' isFinal='false' isOverride='false'  param_names='A_path;A_name;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='pipe' fullname='com.adobe.flascc.kernel:PlayerKernel/pipe' isStatic='false' isFinal='false' isOverride='false'  param_names='A_fildes;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='pselect' fullname='com.adobe.flascc.kernel:PlayerKernel/pselect' isStatic='false' isFinal='false' isOverride='false'  param_names='A_nd;A_in;A_ou;A_ex;A_ts;A_sm;errnoPtr' param_types='int;int;int;int;int;int;int' param_defaults='undefined;undefined;undefined;undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='readNullTerminatedStr' fullname='com.adobe.flascc.kernel:PlayerKernel/private:readNullTerminatedStr' isStatic='false' isFinal='false' isOverride='false'  param_names='ptr' param_types='int' param_defaults='undefined' result_type='String'>
</method>
<method name='read' fullname='com.adobe.flascc.kernel:PlayerKernel/read' isStatic='false' isFinal='false' isOverride='false'  param_names='fd;buf;nbyte;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        ]]></description>
</method>
<method name='readv' fullname='com.adobe.flascc.kernel:PlayerKernel/readv' isStatic='false' isFinal='false' isOverride='false'  param_names='fd;vecs;veccnt;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        ]]></description>
</method>
<method name='rename' fullname='com.adobe.flascc.kernel:PlayerKernel/rename' isStatic='false' isFinal='false' isOverride='false'  param_names='old;newp;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        ]]></description>
</method>
<method name='revoke' fullname='com.adobe.flascc.kernel:PlayerKernel/revoke' isStatic='false' isFinal='false' isOverride='false'  param_names='A_path;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='rmdir' fullname='com.adobe.flascc.kernel:PlayerKernel/rmdir' isStatic='false' isFinal='false' isOverride='false'  param_names='path;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
        ]]></description>
</method>
<method name='sched_get_priority_max' fullname='com.adobe.flascc.kernel:PlayerKernel/sched_get_priority_max' isStatic='false' isFinal='false' isOverride='false'  param_names='A_policy;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='sched_get_priority_min' fullname='com.adobe.flascc.kernel:PlayerKernel/sched_get_priority_min' isStatic='false' isFinal='false' isOverride='false'  param_names='A_policy;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='sched_yield' fullname='com.adobe.flascc.kernel:PlayerKernel/sched_yield' isStatic='false' isFinal='false' isOverride='false'  param_names='errnoPtr' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='semget' fullname='com.adobe.flascc.kernel:PlayerKernel/semget' isStatic='false' isFinal='false' isOverride='false'  param_names='A_key;A_nsems;A_semflg;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='setegid' fullname='com.adobe.flascc.kernel:PlayerKernel/setegid' isStatic='false' isFinal='false' isOverride='false'  param_names='e;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
</method>
<method name='seteuid' fullname='com.adobe.flascc.kernel:PlayerKernel/seteuid' isStatic='false' isFinal='false' isOverride='false'  param_names='e;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
</method>
<method name='setgid' fullname='com.adobe.flascc.kernel:PlayerKernel/setgid' isStatic='false' isFinal='false' isOverride='false'  param_names='A_gid;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='setgroups' fullname='com.adobe.flascc.kernel:PlayerKernel/setgroups' isStatic='false' isFinal='false' isOverride='false'  param_names='A_gidsetsize;A_gidset;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='setpgid' fullname='com.adobe.flascc.kernel:PlayerKernel/setpgid' isStatic='false' isFinal='false' isOverride='false'  param_names='A_pid;A_pgid;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='setpriority' fullname='com.adobe.flascc.kernel:PlayerKernel/setpriority' isStatic='false' isFinal='false' isOverride='false'  param_names='A_which;A_who;A_prio;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='setregid' fullname='com.adobe.flascc.kernel:PlayerKernel/setregid' isStatic='false' isFinal='false' isOverride='false'  param_names='A_rgid;A_egid;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='setreuid' fullname='com.adobe.flascc.kernel:PlayerKernel/setreuid' isStatic='false' isFinal='false' isOverride='false'  param_names='r;e;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
</method>
<method name='setsid' fullname='com.adobe.flascc.kernel:PlayerKernel/setsid' isStatic='false' isFinal='false' isOverride='false'  param_names='errnoPtr' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='setsockopt' fullname='com.adobe.flascc.kernel:PlayerKernel/setsockopt' isStatic='false' isFinal='false' isOverride='false'  param_names='A_s;A_level;A_name;A_val;A_valsize;errnoPtr' param_types='int;int;int;int;int;int' param_defaults='undefined;undefined;undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='setuid' fullname='com.adobe.flascc.kernel:PlayerKernel/setuid' isStatic='false' isFinal='false' isOverride='false'  param_names='A_uid;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='shm_unlink' fullname='com.adobe.flascc.kernel:PlayerKernel/shm_unlink' isStatic='false' isFinal='false' isOverride='false'  param_names='A_path;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='shmdt' fullname='com.adobe.flascc.kernel:PlayerKernel/shmdt' isStatic='false' isFinal='false' isOverride='false'  param_names='A_shmaddr;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='shmget' fullname='com.adobe.flascc.kernel:PlayerKernel/shmget' isStatic='false' isFinal='false' isOverride='false'  param_names='A_key;A_size;A_shmflg;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='shutdown' fullname='com.adobe.flascc.kernel:PlayerKernel/shutdown' isStatic='false' isFinal='false' isOverride='false'  param_names='A_s;A_how;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='sigpending' fullname='com.adobe.flascc.kernel:PlayerKernel/sigpending' isStatic='false' isFinal='false' isOverride='false'  param_names='A_set;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='sigprocmask' fullname='com.adobe.flascc.kernel:PlayerKernel/sigprocmask' isStatic='false' isFinal='false' isOverride='false'  param_names='how;set;oset;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
</method>
<method name='sigsuspend' fullname='com.adobe.flascc.kernel:PlayerKernel/sigsuspend' isStatic='false' isFinal='false' isOverride='false'  param_names='A_mask;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='sigwait' fullname='com.adobe.flascc.kernel:PlayerKernel/sigwait' isStatic='false' isFinal='false' isOverride='false'  param_names='A_set;A_sig;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='socket' fullname='com.adobe.flascc.kernel:PlayerKernel/socket' isStatic='false' isFinal='false' isOverride='false'  param_names='A_domain;A_type;A_protocol;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='socketpair' fullname='com.adobe.flascc.kernel:PlayerKernel/socketpair' isStatic='false' isFinal='false' isOverride='false'  param_names='A_domain;A_type;A_protocol;A_rsv;errnoPtr' param_types='int;int;int;int;int' param_defaults='undefined;undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='statImpl' fullname='com.adobe.flascc.kernel:PlayerKernel/private:statImpl' isStatic='false' isFinal='false' isOverride='false'  param_names='entry;ub;errnoPtr' param_types='com.adobe.flascc.vfs:FileHandle;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        ]]></description>
</method>
<method name='stat' fullname='com.adobe.flascc.kernel:PlayerKernel/stat' isStatic='false' isFinal='false' isOverride='false'  param_names='path;ub;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        ]]></description>
</method>
<method name='symlink' fullname='com.adobe.flascc.kernel:PlayerKernel/symlink' isStatic='false' isFinal='false' isOverride='false'  param_names='A_path;A_link;errnoPtr' param_types='int;int;int' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='sync' fullname='com.adobe.flascc.kernel:PlayerKernel/sync' isStatic='false' isFinal='false' isOverride='false'  param_names='errnoPtr' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='twoInts' fullname='com.adobe.flascc.kernel:PlayerKernel/private:twoInts' isStatic='false' isFinal='false' isOverride='false'  param_names='high;low' param_types='int;int' param_defaults='undefined;undefined' result_type='Array'>
<description><![CDATA[
        This should match the twoInts in ShellPosixGlue.cpp
        ]]></description>
</method>
<method name='umask' fullname='com.adobe.flascc.kernel:PlayerKernel/umask' isStatic='false' isFinal='false' isOverride='false'  param_names='A_newmask;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='unlink' fullname='com.adobe.flascc.kernel:PlayerKernel/unlink' isStatic='false' isFinal='false' isOverride='false'  param_names='path;errnoPtr' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
        ]]></description>
</method>
<method name='vfork' fullname='com.adobe.flascc.kernel:PlayerKernel/vfork' isStatic='false' isFinal='false' isOverride='false'  param_names='errnoPtr' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='wait4' fullname='com.adobe.flascc.kernel:PlayerKernel/wait4' isStatic='false' isFinal='false' isOverride='false'  param_names='A_pid;A_status;A_options;A_rusage;errnoPtr' param_types='int;int;int;int;int' param_defaults='undefined;undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        Not implemented; always returns -1.
        ]]></description>
</method>
<method name='write' fullname='com.adobe.flascc.kernel:PlayerKernel/write' isStatic='false' isFinal='false' isOverride='false'  param_names='fd;buf;nbyte;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        ]]></description>
</method>
<method name='writev' fullname='com.adobe.flascc.kernel:PlayerKernel/writev' isStatic='false' isFinal='false' isOverride='false'  param_names='fd;vecs;veccnt;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
        ]]></description>
</method>
<field name='DT_BLK' fullname='com.adobe.flascc.kernel:KernelConstants/DT_BLK' type='int' isStatic='true' isConst='true' defaultValue='6' >
</field>
<field name='DT_CHR' fullname='com.adobe.flascc.kernel:KernelConstants/DT_CHR' type='int' isStatic='true' isConst='true' defaultValue='2' >
</field>
<field name='DT_DIR' fullname='com.adobe.flascc.kernel:KernelConstants/DT_DIR' type='int' isStatic='true' isConst='true' defaultValue='4' >
</field>
<field name='DT_FIFO' fullname='com.adobe.flascc.kernel:KernelConstants/DT_FIFO' type='int' isStatic='true' isConst='true' defaultValue='1' >
</field>
<field name='DT_LNK' fullname='com.adobe.flascc.kernel:KernelConstants/DT_LNK' type='int' isStatic='true' isConst='true' defaultValue='10' >
</field>
<field name='DT_REG' fullname='com.adobe.flascc.kernel:KernelConstants/DT_REG' type='int' isStatic='true' isConst='true' defaultValue='8' >
</field>
<field name='DT_SOCK' fullname='com.adobe.flascc.kernel:KernelConstants/DT_SOCK' type='int' isStatic='true' isConst='true' defaultValue='12' >
</field>
<field name='DT_UNKNOWN' fullname='com.adobe.flascc.kernel:KernelConstants/DT_UNKNOWN' type='int' isStatic='true' isConst='true' defaultValue='0' >
</field>
<field name='DT_WHT' fullname='com.adobe.flascc.kernel:KernelConstants/DT_WHT' type='int' isStatic='true' isConst='true' defaultValue='14' >
</field>
<field name='E2BIG' fullname='com.adobe.flascc.kernel:KernelConstants/E2BIG' type='int' isStatic='true' isConst='true' defaultValue='7' >
</field>
<field name='EACCESS' fullname='com.adobe.flascc.kernel:KernelConstants/EACCESS' type='int' isStatic='true' isConst='true' defaultValue='13' >
</field>
<field name='EBADF' fullname='com.adobe.flascc.kernel:KernelConstants/EBADF' type='int' isStatic='true' isConst='true' defaultValue='9' >
</field>
<field name='EBUSY' fullname='com.adobe.flascc.kernel:KernelConstants/EBUSY' type='int' isStatic='true' isConst='true' defaultValue='16' >
</field>
<field name='ECHILD' fullname='com.adobe.flascc.kernel:KernelConstants/ECHILD' type='int' isStatic='true' isConst='true' defaultValue='10' >
</field>
<field name='EDEADLK' fullname='com.adobe.flascc.kernel:KernelConstants/EDEADLK' type='int' isStatic='true' isConst='true' defaultValue='11' >
</field>
<field name='EEXIST' fullname='com.adobe.flascc.kernel:KernelConstants/EEXIST' type='int' isStatic='true' isConst='true' defaultValue='17' >
</field>
<field name='EFAULT' fullname='com.adobe.flascc.kernel:KernelConstants/EFAULT' type='int' isStatic='true' isConst='true' defaultValue='14' >
</field>
<field name='EFBIG' fullname='com.adobe.flascc.kernel:KernelConstants/EFBIG' type='int' isStatic='true' isConst='true' defaultValue='27' >
</field>
<field name='EINTR' fullname='com.adobe.flascc.kernel:KernelConstants/EINTR' type='int' isStatic='true' isConst='true' defaultValue='4' >
</field>
<field name='EINVAL' fullname='com.adobe.flascc.kernel:KernelConstants/EINVAL' type='int' isStatic='true' isConst='true' defaultValue='22' >
</field>
<field name='EIO' fullname='com.adobe.flascc.kernel:KernelConstants/EIO' type='int' isStatic='true' isConst='true' defaultValue='5' >
</field>
<field name='EISDIR' fullname='com.adobe.flascc.kernel:KernelConstants/EISDIR' type='int' isStatic='true' isConst='true' defaultValue='21' >
</field>
<field name='EMFILE' fullname='com.adobe.flascc.kernel:KernelConstants/EMFILE' type='int' isStatic='true' isConst='true' defaultValue='24' >
</field>
<field name='EMLINK' fullname='com.adobe.flascc.kernel:KernelConstants/EMLINK' type='int' isStatic='true' isConst='true' defaultValue='31' >
</field>
<field name='ENFILE' fullname='com.adobe.flascc.kernel:KernelConstants/ENFILE' type='int' isStatic='true' isConst='true' defaultValue='23' >
</field>
<field name='ENODEV' fullname='com.adobe.flascc.kernel:KernelConstants/ENODEV' type='int' isStatic='true' isConst='true' defaultValue='19' >
</field>
<field name='ENOENT' fullname='com.adobe.flascc.kernel:KernelConstants/ENOENT' type='int' isStatic='true' isConst='true' defaultValue='2' >
</field>
<field name='ENOEXEC' fullname='com.adobe.flascc.kernel:KernelConstants/ENOEXEC' type='int' isStatic='true' isConst='true' defaultValue='8' >
</field>
<field name='ENOMEM' fullname='com.adobe.flascc.kernel:KernelConstants/ENOMEM' type='int' isStatic='true' isConst='true' defaultValue='12' >
</field>
<field name='ENOSPC' fullname='com.adobe.flascc.kernel:KernelConstants/ENOSPC' type='int' isStatic='true' isConst='true' defaultValue='28' >
</field>
<field name='ENOSYS' fullname='com.adobe.flascc.kernel:KernelConstants/ENOSYS' type='int' isStatic='true' isConst='true' defaultValue='78' >
</field>
<field name='ENOTBLK' fullname='com.adobe.flascc.kernel:KernelConstants/ENOTBLK' type='int' isStatic='true' isConst='true' defaultValue='15' >
</field>
<field name='ENOTDIR' fullname='com.adobe.flascc.kernel:KernelConstants/ENOTDIR' type='int' isStatic='true' isConst='true' defaultValue='20' >
</field>
<field name='ENOTEMPTY' fullname='com.adobe.flascc.kernel:KernelConstants/ENOTEMPTY' type='int' isStatic='true' isConst='true' defaultValue='66' >
</field>
<field name='ENOTTY' fullname='com.adobe.flascc.kernel:KernelConstants/ENOTTY' type='int' isStatic='true' isConst='true' defaultValue='25' >
</field>
<field name='ENXIO' fullname='com.adobe.flascc.kernel:KernelConstants/ENXIO' type='int' isStatic='true' isConst='true' defaultValue='6' >
</field>
<field name='EOVERFLOW' fullname='com.adobe.flascc.kernel:KernelConstants/EOVERFLOW' type='int' isStatic='true' isConst='true' defaultValue='84' >
</field>
<field name='EPERM' fullname='com.adobe.flascc.kernel:KernelConstants/EPERM' type='int' isStatic='true' isConst='true' defaultValue='1' >
</field>
<field name='EPIPE' fullname='com.adobe.flascc.kernel:KernelConstants/EPIPE' type='int' isStatic='true' isConst='true' defaultValue='32' >
</field>
<field name='EROFS' fullname='com.adobe.flascc.kernel:KernelConstants/EROFS' type='int' isStatic='true' isConst='true' defaultValue='30' >
</field>
<field name='ESPIPE' fullname='com.adobe.flascc.kernel:KernelConstants/ESPIPE' type='int' isStatic='true' isConst='true' defaultValue='29' >
</field>
<field name='ESRCH' fullname='com.adobe.flascc.kernel:KernelConstants/ESRCH' type='int' isStatic='true' isConst='true' defaultValue='3' >
</field>
<field name='ETXBSY' fullname='com.adobe.flascc.kernel:KernelConstants/ETXBSY' type='int' isStatic='true' isConst='true' defaultValue='26' >
</field>
<field name='EXDEV' fullname='com.adobe.flascc.kernel:KernelConstants/EXDEV' type='int' isStatic='true' isConst='true' defaultValue='18' >
</field>
<field name='F_DUPFD' fullname='com.adobe.flascc.kernel:KernelConstants/F_DUPFD' type='int' isStatic='true' isConst='true' defaultValue='0' >
</field>
<field name='O_ACCMODE' fullname='com.adobe.flascc.kernel:KernelConstants/O_ACCMODE' type='int' isStatic='true' isConst='true' defaultValue='0x0003' >
</field>
<field name='O_APPEND' fullname='com.adobe.flascc.kernel:KernelConstants/O_APPEND' type='int' isStatic='true' isConst='true' defaultValue='0x0008' >
</field>
<field name='O_CREAT' fullname='com.adobe.flascc.kernel:KernelConstants/O_CREAT' type='int' isStatic='true' isConst='true' defaultValue='0x0200' >
</field>
<field name='O_DIRECT' fullname='com.adobe.flascc.kernel:KernelConstants/O_DIRECT' type='int' isStatic='true' isConst='true' defaultValue='0x00010000' >
</field>
<field name='O_EXCL' fullname='com.adobe.flascc.kernel:KernelConstants/O_EXCL' type='int' isStatic='true' isConst='true' defaultValue='0x0800' >
</field>
<field name='O_EXLOCK' fullname='com.adobe.flascc.kernel:KernelConstants/O_EXLOCK' type='int' isStatic='true' isConst='true' defaultValue='0x0020' >
</field>
<field name='O_FSYNC' fullname='com.adobe.flascc.kernel:KernelConstants/O_FSYNC' type='int' isStatic='true' isConst='true' defaultValue='0x0080' >
</field>
<field name='O_NOFOLLOW' fullname='com.adobe.flascc.kernel:KernelConstants/O_NOFOLLOW' type='int' isStatic='true' isConst='true' defaultValue='0x0100' >
</field>
<field name='O_NONBLOCK' fullname='com.adobe.flascc.kernel:KernelConstants/O_NONBLOCK' type='int' isStatic='true' isConst='true' defaultValue='0x0004' >
</field>
<field name='O_RDONLY' fullname='com.adobe.flascc.kernel:KernelConstants/O_RDONLY' type='int' isStatic='true' isConst='true' defaultValue='0x0000' >
</field>
<field name='O_RDWR' fullname='com.adobe.flascc.kernel:KernelConstants/O_RDWR' type='int' isStatic='true' isConst='true' defaultValue='0x0002' >
</field>
<field name='O_SHLOCK' fullname='com.adobe.flascc.kernel:KernelConstants/O_SHLOCK' type='int' isStatic='true' isConst='true' defaultValue='0x0010' >
</field>
<field name='O_SYNC' fullname='com.adobe.flascc.kernel:KernelConstants/O_SYNC' type='int' isStatic='true' isConst='true' defaultValue='0x0080' >
</field>
<field name='O_TRUNC' fullname='com.adobe.flascc.kernel:KernelConstants/O_TRUNC' type='int' isStatic='true' isConst='true' defaultValue='0x0400' >
</field>
<field name='O_WRONLY' fullname='com.adobe.flascc.kernel:KernelConstants/O_WRONLY' type='int' isStatic='true' isConst='true' defaultValue='0x0001' >
</field>
<field name='SEEK_CUR' fullname='com.adobe.flascc.kernel:KernelConstants/SEEK_CUR' type='int' isStatic='true' isConst='true' defaultValue='1' >
</field>
<field name='SEEK_END' fullname='com.adobe.flascc.kernel:KernelConstants/SEEK_END' type='int' isStatic='true' isConst='true' defaultValue='2' >
</field>
<field name='SEEK_SET' fullname='com.adobe.flascc.kernel:KernelConstants/SEEK_SET' type='int' isStatic='true' isConst='true' defaultValue='0' >
</field>
<field name='S_IFBLK' fullname='com.adobe.flascc.kernel:KernelConstants/S_IFBLK' type='int' isStatic='true' isConst='true' defaultValue='0x6000' >
</field>
<field name='S_IFCHR' fullname='com.adobe.flascc.kernel:KernelConstants/S_IFCHR' type='int' isStatic='true' isConst='true' defaultValue='0x2000' >
</field>
<field name='S_IFDIR' fullname='com.adobe.flascc.kernel:KernelConstants/S_IFDIR' type='int' isStatic='true' isConst='true' defaultValue='0x4000' >
</field>
<field name='S_IFIFO' fullname='com.adobe.flascc.kernel:KernelConstants/S_IFIFO' type='int' isStatic='true' isConst='true' defaultValue='0x1000' >
</field>
<field name='S_IFLNK' fullname='com.adobe.flascc.kernel:KernelConstants/S_IFLNK' type='int' isStatic='true' isConst='true' defaultValue='0xA000' >
</field>
<field name='S_IFREG' fullname='com.adobe.flascc.kernel:KernelConstants/S_IFREG' type='int' isStatic='true' isConst='true' defaultValue='0x8000' >
</field>
<field name='S_IFSOCK' fullname='com.adobe.flascc.kernel:KernelConstants/S_IFSOCK' type='int' isStatic='true' isConst='true' defaultValue='0xC000' >
</field>
<field name='_egid' fullname='com.adobe.flascc.kernel:PlayerKernel/private:_egid' type='int' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='_euid' fullname='com.adobe.flascc.kernel:PlayerKernel/private:_euid' type='int' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='_ruid' fullname='com.adobe.flascc.kernel:PlayerKernel/private:_ruid' type='int' isStatic='false' isConst='false' defaultValue='0' >
</field>
<interfaceRec name='ISpecialFile' fullname='com.adobe.flascc.vfs:ISpecialFile' sourcefile='F:\crossbridge\posix\vfs\ISpecialFile.as' namespace='com.adobe.flascc.vfs' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 This interface is used by the VFS for special files that must be implemented via code
 rather than a fixed ByteArray. The default Console implementation uses the ISpecialFile
 interface to handle read/write requests to /dev/tty which corresponds with C/C++ code
 reading/writting to stdin/stdout.
  You might also use this interface to implement other special files like "/dev/null" or "/dev/random".
 ]]></description>
</interfaceRec>
<method name='fcntl' fullname='com.adobe.flascc.vfs:ISpecialFile/com.adobe.flascc.vfs:ISpecialFile:fcntl' isStatic='false' isFinal='false' isOverride='false'  param_names='fileDescriptor;cmd;data;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
     This matches the signature of fcntl from the IKernel interface.
     ]]></description>
<param><![CDATA[fileDescriptor The file descriptor being manipulated
     ]]></param>
<param><![CDATA[cmd An fcntl command
     ]]></param>
<param><![CDATA[data An argument for the given command
     ]]></param>
<param><![CDATA[errnoPtr A pointer to the location of the errno global variable
     ]]></param>
<return><![CDATA[an integer indicating the success or failure of the syscall, see the BSD documentation for expected values
     ]]></return>
</method>
<method name='ioctl' fullname='com.adobe.flascc.vfs:ISpecialFile/com.adobe.flascc.vfs:ISpecialFile:ioctl' isStatic='false' isFinal='false' isOverride='false'  param_names='fileDescriptor;request;data;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
     This matches the signature of ioctl from the IKernel interface.
     ]]></description>
<param><![CDATA[fileDescriptor The file descriptor being manipulated
     ]]></param>
<param><![CDATA[request An ioctl request
     ]]></param>
<param><![CDATA[data An argument for the given command
     ]]></param>
<param><![CDATA[errnoPtr A pointer to the location of the errno global variable
     ]]></param>
<return><![CDATA[an integer indicating the success or failure of the syscall, see the BSD documentation for expected values
     ]]></return>
</method>
<method name='read' fullname='com.adobe.flascc.vfs:ISpecialFile/com.adobe.flascc.vfs:ISpecialFile:read' isStatic='false' isFinal='false' isOverride='false'  param_names='fileDescriptor;bufPtr;nbyte;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
     This matches the signature of read from the IKernel interface.
     ]]></description>
<param><![CDATA[fileDescriptor The file descriptor being read from
     ]]></param>
<param><![CDATA[bufPtr A Pointer to the buffer you are expected to fill with data for this read.
     ]]></param>
<param><![CDATA[nbyte The size of the buffer pointed to by bufPtr
     ]]></param>
<param><![CDATA[errnoPtr A pointer to the location of the errno global variable
     ]]></param>
<return><![CDATA[an integer indicating the success or failure of the syscall, see the BSD documentation for expected values
     ]]></return>
</method>
<method name='write' fullname='com.adobe.flascc.vfs:ISpecialFile/com.adobe.flascc.vfs:ISpecialFile:write' isStatic='false' isFinal='false' isOverride='false'  param_names='fileDescriptor;bufPtr;nbyte;errnoPtr' param_types='int;int;int;int' param_defaults='undefined;undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
     This matches the signature of write from the IKernel interface.
     ]]></description>
<param><![CDATA[fileDescriptor The file descriptor being written to
     ]]></param>
<param><![CDATA[bufPtr A Pointer to the buffer containing data to be written to this file descriptor.
     ]]></param>
<param><![CDATA[nbyte The size of the buffer pointed to by bufPtr
     ]]></param>
<param><![CDATA[errnoPtr A pointer to the location of the errno global variable
     ]]></param>
<return><![CDATA[an integer indicating the success or failure of the syscall, see the BSD documentation for expected values
     ]]></return>
</method>
<classRec name='CheckPath' fullname='com.adobe.flascc.vfs:CheckPath' sourcefile='F:\crossbridge\posix\vfs\IVFS.as' namespace='com.adobe.flascc.vfs' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
     This enum class contains the results determined by the checkPath method.
     It should be used by implemetations of the IKernel interface but not by end-user code.
     ]]></description>
</classRec>
<classRec name='FileHandle' fullname='com.adobe.flascc.vfs:FileHandle' sourcefile='F:\crossbridge\posix\vfs\IVFS.as' namespace='com.adobe.flascc.vfs' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
     This class represents open files available to an flascc application. It should be used by implementations of the
     IKernel interface but not by end-user code.
     ]]></description>
</classRec>
<interfaceRec name='IVFS' fullname='com.adobe.flascc.vfs:IVFS' sourcefile='F:\crossbridge\posix\vfs\IVFS.as' namespace='com.adobe.flascc.vfs' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
     IVFS describes the interface to the flascc virtual filesystem, which
     controls how the filesystem appears to an flascc application. It is
     possible for user code to implement this interface, though there
     is a default implementation, DefaultVFS. The CModule.getVFS method
     returns the current VFS.
     ]]></description>
</interfaceRec>
<method name='FileHandle' fullname='com.adobe.flascc.vfs:FileHandle/FileHandle' isStatic='false' isFinal='false' isOverride='false'  param_names='__backingStore;__backingStoreRelativePath;__bytes;__callback;__readable;__writeable;__appending;__isDirectory;__path;__position' param_types='com.adobe.flascc.vfs:IBackingStore;String;flash.utils:ByteArray;com.adobe.flascc.vfs:ISpecialFile;Boolean;Boolean;Boolean;Boolean;String;uint' param_defaults='null;null;null;null;true;false;false;false;null;0' result_type='*'>
<description><![CDATA[
        ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='addBackingStore' fullname='com.adobe.flascc.vfs:IVFS/com.adobe.flascc.vfs:IVFS:addBackingStore' isStatic='false' isFinal='false' isOverride='false'  param_names='backingStore;mountPath' param_types='com.adobe.flascc.vfs:IBackingStore;String' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
         Mounts a backing store as part of the VFS.
         Once this method returns, files contained within the backing store
         will be available to the application.
                  ]]></description>
<param><![CDATA[backingStore The backing store containing the files to add.
         ]]></param>
<param><![CDATA[mountPath The path to the mount point for this backing store.
                          This must be an empty directory.
         ]]></param>
</method>
<method name='addDirectory' fullname='com.adobe.flascc.vfs:IVFS/com.adobe.flascc.vfs:IVFS:addDirectory' isStatic='false' isFinal='false' isOverride='false'  param_names='path' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
         Adds an empty directory to the filesystem.
         The directory must not already exist.
                  ]]></description>
<param><![CDATA[path The absolute path to the directory to be added.
         ]]></param>
</method>
<method name='addFile' fullname='com.adobe.flascc.vfs:IVFS/com.adobe.flascc.vfs:IVFS:addFile' isStatic='false' isFinal='false' isOverride='false'  param_names='path;data' param_types='String;flash.utils:ByteArray' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
         Adds a file to the filesystem.
         The file must not already exist.
                  ]]></description>
<param><![CDATA[path The absolute path to the file to be added.
         ]]></param>
<param><![CDATA[data The contents of the file.
         ]]></param>
</method>
<method name='addSpecialFile' fullname='com.adobe.flascc.vfs:IVFS/com.adobe.flascc.vfs:IVFS:addSpecialFile' isStatic='false' isFinal='false' isOverride='false'  param_names='path;specialFile' param_types='String;com.adobe.flascc.vfs:ISpecialFile' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
         Add a special file to the filesystem.
         Special files are different from regular files in that they
         don't have any stored contents. Instead calls to read and write
         for a special file are routed to a callback object. Special files
         are never persisted across different runs of the application.
                  ]]></description>
<param><![CDATA[path The absolute path to the special file.
         ]]></param>
<param><![CDATA[specialFile The callback object for the file.
         ]]></param>
</method>
<method name='checkPath' fullname='com.adobe.flascc.vfs:IVFS/com.adobe.flascc.vfs:IVFS:checkPath' isStatic='false' isFinal='false' isOverride='false'  param_names='path' param_types='String' param_defaults='undefined' result_type='String'>
<description><![CDATA[
         Checks a proposed path for a new file.
                  ]]></description>
<param><![CDATA[path The absolute path to the file.
         
         ]]></param>
<return><![CDATA[A value from the CheckPath enum class describing any problems with the
                      proposed file name, if any.
         ]]></return>
</method>
<method name='closeFile' fullname='com.adobe.flascc.vfs:IVFS/com.adobe.flascc.vfs:IVFS:closeFile' isStatic='false' isFinal='false' isOverride='false'  param_names='fileDescriptor' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
         Closes a file.
         Once this method returns, the file descriptor is no longer valid.
                  ]]></description>
<param><![CDATA[fileDescriptor A file descriptor returned from openFile.
         ]]></param>
</method>
<method name='deleteFile' fullname='com.adobe.flascc.vfs:IVFS/com.adobe.flascc.vfs:IVFS:deleteFile' isStatic='false' isFinal='false' isOverride='false'  param_names='path' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
         Deletes a file (or directory) from the filesystem.
         The file must exist, and if it is a directory, it must be empty.
                  ]]></description>
<param><![CDATA[path The absolute path to the file to be deleted.
         ]]></param>
</method>
<method name='getDirectoryEntries' fullname='com.adobe.flascc.vfs:IVFS/com.adobe.flascc.vfs:IVFS:getDirectoryEntries' isStatic='false' isFinal='false' isOverride='false'  param_names='dirpath' param_types='String' param_defaults='undefined' result_type='Vector$com.adobe.flascc.vfs:FileHandle'>
<description><![CDATA[
         Retrieves the contents of a directory.
                  ]]></description>
<param><![CDATA[dirpath The absolute path to the directory.
         
         ]]></param>
<return><![CDATA[An array of FileHandle instances, one per file in
                      the directory, or null if the directory does not
                      exist.
         ]]></return>
</method>
<method name='getFileHandleFromFileDescriptor' fullname='com.adobe.flascc.vfs:IVFS/com.adobe.flascc.vfs:IVFS:getFileHandleFromFileDescriptor' isStatic='false' isFinal='false' isOverride='false'  param_names='fileDescriptor' param_types='int' param_defaults='undefined' result_type='com.adobe.flascc.vfs:FileHandle'>
<description><![CDATA[
         Looks up the FileHandle instance for a file descriptor.
                  ]]></description>
<param><![CDATA[fileDescriptor A file descriptor.
         
         ]]></param>
<return><![CDATA[The FileHandle corresponding to the file descriptor,
                  or null if the file descriptor is not valid.
         ]]></return>
</method>
<method name='getFileHandleFromPath' fullname='com.adobe.flascc.vfs:IVFS/com.adobe.flascc.vfs:IVFS:getFileHandleFromPath' isStatic='false' isFinal='false' isOverride='false'  param_names='path' param_types='String' param_defaults='undefined' result_type='com.adobe.flascc.vfs:FileHandle'>
<description><![CDATA[
         Looks up the FileHandle instance for a file descriptor.
                  ]]></description>
<param><![CDATA[path The absolute path to the file to be retrieved.
         
         ]]></param>
<return><![CDATA[The FileHandle corresponding to the path,
                  or null if the path cannot be retrieved.
         ]]></return>
</method>
<method name='isValidFileDescriptor' fullname='com.adobe.flascc.vfs:IVFS/com.adobe.flascc.vfs:IVFS:isValidFileDescriptor' isStatic='false' isFinal='false' isOverride='false'  param_names='fileDescriptor' param_types='int' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
         Determines whether the argument is a valid file descriptor.
                  ]]></description>
<param><![CDATA[fileDescriptor A integer that may or may not be a file descriptor.
         
         ]]></param>
<return><![CDATA[true if the file descriptor is a valid file descriptor
                  corresponding to an open file, false otherwise.
         ]]></return>
</method>
<method name='makeRegularFile' fullname='com.adobe.flascc.vfs:FileHandle/makeRegularFile' isStatic='true' isFinal='false' isOverride='false'  param_names='__path;__backingStoreRelativePath;__backingStore;__bytes;__isDirectory' param_types='String;String;com.adobe.flascc.vfs:IBackingStore;flash.utils:ByteArray;Boolean' param_defaults='undefined;undefined;undefined;undefined;undefined' result_type='com.adobe.flascc.vfs:FileHandle'>
<description><![CDATA[
        ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='makeSpecialFile' fullname='com.adobe.flascc.vfs:FileHandle/makeSpecialFile' isStatic='true' isFinal='false' isOverride='false'  param_names='specialFile' param_types='com.adobe.flascc.vfs:ISpecialFile' param_defaults='undefined' result_type='com.adobe.flascc.vfs:FileHandle'>
<description><![CDATA[
        ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='openFile' fullname='com.adobe.flascc.vfs:IVFS/com.adobe.flascc.vfs:IVFS:openFile' isStatic='false' isFinal='false' isOverride='false'  param_names='fileHandle;fileDescriptor' param_types='com.adobe.flascc.vfs:FileHandle;int' param_defaults='undefined;-1' result_type='int'>
<description><![CDATA[
         Opens a file and assigns it a file descriptor.
         A file descriptor is a non-negative integer, which remains
         valid until closeFile is called.
                  ]]></description>
<param><![CDATA[fileHandle An FileHandle instance for the file to be opened.
         ]]></param>
<param><![CDATA[fileDescriptor If specified, the file descriptor to assign. Must not
                      already be a valid file descriptor.
         
         ]]></param>
<return><![CDATA[The file descriptor assigned to this file.
         ]]></return>
</method>
<method name='backingStoreRelativePath' fullname='com.adobe.flascc.vfs:FileHandle/backingStoreRelativePath/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
        The relative path to the underlying file in the VFS.
        ]]></description>
</method>
<method name='backingStore' fullname='com.adobe.flascc.vfs:FileHandle/backingStore/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.adobe.flascc.vfs:IBackingStore'>
<description><![CDATA[
        The BackingStore that owns this FDEntry.
        ]]></description>
</method>
<method name='bytes' fullname='com.adobe.flascc.vfs:FileHandle/bytes/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.utils:ByteArray'>
<description><![CDATA[
        If this file descriptor refers to a normal file this will contain the contents of the file.
        ]]></description>
</method>
<method name='callback' fullname='com.adobe.flascc.vfs:FileHandle/callback/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.adobe.flascc.vfs:ISpecialFile'>
<description><![CDATA[
        If this file descriptor refers to a special file this references an object implementing the ISpecialFile interface that will be used to handle read/write requests.
        ]]></description>
</method>
<method name='console' fullname='com.adobe.flascc.vfs:IVFS/com.adobe.flascc.vfs:IVFS:console/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.adobe.flascc.vfs:ISpecialFile'>
<description><![CDATA[
         Get the current console for the filesystem.
         This is the special file "/dev/tty".
                  ]]></description>
<return><![CDATA[The currently assigned console object, or null if there isn't one.
         ]]></return>
</method>
<method name='isDirectory' fullname='com.adobe.flascc.vfs:FileHandle/isDirectory/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
        True if this file descriptor referes to a directory.
        ]]></description>
</method>
<method name='path' fullname='com.adobe.flascc.vfs:FileHandle/path/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
        The full path to the file referenced by this file descriptor
        ]]></description>
</method>
<method name='console' fullname='com.adobe.flascc.vfs:IVFS/com.adobe.flascc.vfs:IVFS:console/set' isStatic='false' isFinal='false' isOverride='false'  param_names='c' param_types='com.adobe.flascc.vfs:ISpecialFile' param_defaults='undefined' result_type='void'>
<description><![CDATA[
         Set the console for the filesystem.
         This associates the file "/dev/tty" with the console object.
         When the applications writes to stdout and stderr, the console
         object will be called back.
                  ]]></description>
<param><![CDATA[c The console object.
         ]]></param>
</method>
<field name='PATH_COMPONENT_DOES_NOT_EXIST' fullname='com.adobe.flascc.vfs:CheckPath/PATH_COMPONENT_DOES_NOT_EXIST' type='String' isStatic='true' isConst='true' defaultValue='pathComponentDoesNotExist' >
</field>
<field name='PATH_COMPONENT_IS_NOT_DIRECTORY' fullname='com.adobe.flascc.vfs:CheckPath/PATH_COMPONENT_IS_NOT_DIRECTORY' type='String' isStatic='true' isConst='true' defaultValue='pathComponentIsNotDirectory' >
</field>
<field name='PATH_VALID' fullname='com.adobe.flascc.vfs:CheckPath/PATH_VALID' type='String' isStatic='true' isConst='true' defaultValue='pathValid' >
</field>
<field name='_backingStoreRelativePath' fullname='com.adobe.flascc.vfs:FileHandle/private:_backingStoreRelativePath' type='String' isStatic='false' isConst='false' defaultValue='null' >
</field>
<field name='_backingStore' fullname='com.adobe.flascc.vfs:FileHandle/private:_backingStore' type='com.adobe.flascc.vfs:IBackingStore' isStatic='false' isConst='false' defaultValue='null' >
</field>
<field name='_bytes' fullname='com.adobe.flascc.vfs:FileHandle/private:_bytes' type='flash.utils:ByteArray' isStatic='false' isConst='false' defaultValue='null' >
</field>
<field name='_callback' fullname='com.adobe.flascc.vfs:FileHandle/private:_callback' type='com.adobe.flascc.vfs:ISpecialFile' isStatic='false' isConst='false' defaultValue='null' >
</field>
<field name='_isDirectory' fullname='com.adobe.flascc.vfs:FileHandle/private:_isDirectory' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
</field>
<field name='_path' fullname='com.adobe.flascc.vfs:FileHandle/private:_path' type='String' isStatic='false' isConst='false' defaultValue='null' >
</field>
<field name='appending' fullname='com.adobe.flascc.vfs:FileHandle/appending' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[
        True if this file descriptor was opened with O_APPEND.
        ]]></description>
</field>
<field name='position' fullname='com.adobe.flascc.vfs:FileHandle/position' type='uint' isStatic='false' isConst='false' >
<description><![CDATA[
        The position within the file that read/write operations will occur at.
        ]]></description>
</field>
<field name='readable' fullname='com.adobe.flascc.vfs:FileHandle/readable' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[
        True if this file descriptor was opened with O_RDWR or if it was not opened as O_WRONLY.
        ]]></description>
</field>
<field name='writeable' fullname='com.adobe.flascc.vfs:FileHandle/writeable' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[
        True if this file descriptor was opened with O_WRONLY or O_RDWR.
        ]]></description>
</field>
<interfaceRec name='IBackingStore' fullname='com.adobe.flascc.vfs:IBackingStore' sourcefile='F:\crossbridge\posix\vfs\IBackingStore.as' namespace='com.adobe.flascc.vfs' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
     This interface describes how an underlying data store interacts with
     the flascc virtual filesystem. Implement this interface to customize
     the backing store for the VFS. Backing stores are added to the VFS
     via the IBackingStore.addBackingStore method.
     ]]></description>
</interfaceRec>
<method name='addFile' fullname='com.adobe.flascc.vfs:IBackingStore/com.adobe.flascc.vfs:IBackingStore:addFile' isStatic='false' isFinal='false' isOverride='false'  param_names='path;data' param_types='String;flash.utils:ByteArray' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
         Adds a file into the filesystem with a given path and contents.
         Ownership of the ByteArray is assumed to transfer to the BackingStore with this method.
         
         ]]></description>
<param><![CDATA[path The path to the file. 
         ]]></param>
<param><![CDATA[data The contents of the file.
         ]]></param>
</method>
<method name='deleteFile' fullname='com.adobe.flascc.vfs:IBackingStore/com.adobe.flascc.vfs:IBackingStore:deleteFile' isStatic='false' isFinal='false' isOverride='false'  param_names='path' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
         Deletes a file from the filesystem.
         
         ]]></description>
<param><![CDATA[path The path to the file. 
         ]]></param>
</method>
<method name='flush' fullname='com.adobe.flascc.vfs:IBackingStore/com.adobe.flascc.vfs:IBackingStore:flush' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
         Writes any changes to the underlying store.
         ]]></description>
</method>
<method name='getFile' fullname='com.adobe.flascc.vfs:IBackingStore/com.adobe.flascc.vfs:IBackingStore:getFile' isStatic='false' isFinal='false' isOverride='false'  param_names='path' param_types='String' param_defaults='undefined' result_type='flash.utils:ByteArray'>
<description><![CDATA[
         Retrieves the contents of a file from this BackingStore.
         
         ]]></description>
<param><![CDATA[path The path to the file. 
                  ]]></param>
<return><![CDATA[The contents of the file.
         ]]></return>
</method>
<method name='getPaths' fullname='com.adobe.flascc.vfs:IBackingStore/com.adobe.flascc.vfs:IBackingStore:getPaths' isStatic='false' isFinal='false' isOverride='false'  result_type='Vector$String'>
<description><![CDATA[
         Retrieves all of the files paths contained in this BackingStore.
                  ]]></description>
<return><![CDATA[A Vector of all file paths contained in this BackingStore.
         ]]></return>
</method>
<method name='isDirectory' fullname='com.adobe.flascc.vfs:IBackingStore/com.adobe.flascc.vfs:IBackingStore:isDirectory' isStatic='false' isFinal='false' isOverride='false'  param_names='path' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
         Determines whether a path refers to a directory.
         
         ]]></description>
<param><![CDATA[path The path to be checked.  
                  ]]></param>
<return><![CDATA[true if the path refers to a directory, false otherwise.
         ]]></return>
</method>
<method name='pathExists' fullname='com.adobe.flascc.vfs:IBackingStore/com.adobe.flascc.vfs:IBackingStore:pathExists' isStatic='false' isFinal='false' isOverride='false'  param_names='path' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
         Determines whether a path refers to a file or directory.
         
         ]]></description>
<param><![CDATA[path The path to be checked.  
                  ]]></param>
<return><![CDATA[true if the path refers to a file or a directory, false otherwise.
         ]]></return>
</method>
<method name='readOnly' fullname='com.adobe.flascc.vfs:IBackingStore/com.adobe.flascc.vfs:IBackingStore:readOnly/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
         Determines whether the filesystem may be changed.
         
         ]]></description>
<return><![CDATA[true if the fileystem is read only, false otherwise.
         ]]></return>
</method>
<classRec name='DefaultVFS' fullname='com.adobe.flascc.vfs:DefaultVFS' sourcefile='F:\crossbridge\posix\vfs\DefaultVFS.as' namespace='com.adobe.flascc.vfs' access='public' baseclass='Object' interfaces='com.adobe.flascc.vfs:IVFS' isFinal='false' isDynamic='false' >
<description><![CDATA[
    The default implementation of the IVFS interface
    ]]></description>
</classRec>
<classRec name='PathUtils' fullname='com.adobe.flascc.vfs:PathUtils' sourcefile='F:\crossbridge\posix\vfs\DefaultVFS.as' namespace='com.adobe.flascc.vfs' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
    A collection of path handling related functions
    ]]></description>
</classRec>
<method name='DefaultVFS' fullname='com.adobe.flascc.vfs:DefaultVFS/DefaultVFS' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
        The default implementation of the IVFS interface
        ]]></description>
</method>
<method name='addBackingStore' fullname='com.adobe.flascc.vfs:DefaultVFS/addBackingStore' isStatic='false' isFinal='false' isOverride='false'  param_names='bs;prefix' param_types='com.adobe.flascc.vfs:IBackingStore;String' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
         Mounts a backing store as part of the VFS.
         Once this method returns, files contained within the backing store
         will be available to the application.
                  ]]></description>
<param><![CDATA[bs The backing store containing the files to add.
         ]]></param>
<param><![CDATA[prefix The path to the mount point for this backing store.
                          This must be an empty directory.
         ]]></param>
</method>
<method name='addDirectory' fullname='com.adobe.flascc.vfs:DefaultVFS/addDirectory' isStatic='false' isFinal='false' isOverride='false'  param_names='path' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
         Adds an empty directory to the filesystem.
         The directory must not already exist.
                  ]]></description>
<param><![CDATA[path The absolute path to the directory to be added.
         ]]></param>
</method>
<method name='addFileImpl' fullname='com.adobe.flascc.vfs:DefaultVFS/private:addFileImpl' isStatic='false' isFinal='false' isOverride='false'  param_names='path;data' param_types='String;flash.utils:ByteArray' param_defaults='undefined;undefined' result_type='void'>
</method>
<method name='addFile' fullname='com.adobe.flascc.vfs:DefaultVFS/addFile' isStatic='false' isFinal='false' isOverride='false'  param_names='path;data' param_types='String;flash.utils:ByteArray' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
         Adds a file to the filesystem.
         The file must not already exist.
                  ]]></description>
<param><![CDATA[path The absolute path to the file to be added.
         ]]></param>
<param><![CDATA[data The contents of the file.
         ]]></param>
</method>
<method name='addSpecialFile' fullname='com.adobe.flascc.vfs:DefaultVFS/addSpecialFile' isStatic='false' isFinal='false' isOverride='false'  param_names='path;specialFile' param_types='String;com.adobe.flascc.vfs:ISpecialFile' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
         Add a special file to the filesystem.
         Special files are different from regular files in that they
         don't have any stored contents. Instead calls to read and write
         for a special file are routed to a callback object. Special files
         are never persisted across different runs of the application.
                  ]]></description>
<param><![CDATA[path The absolute path to the special file.
         ]]></param>
<param><![CDATA[specialFile The callback object for the file.
         
         ]]></param>
<return><![CDATA[A table entry describing the new file.
         ]]></return>
</method>
<method name='checkPath' fullname='com.adobe.flascc.vfs:DefaultVFS/checkPath' isStatic='false' isFinal='false' isOverride='false'  param_names='path' param_types='String' param_defaults='undefined' result_type='String'>
<description><![CDATA[
         Checks a proposed path for a new file.
                  ]]></description>
<param><![CDATA[path The absolute path to the file.
         
         ]]></param>
<return><![CDATA[A CheckPathResult describing any problems with the
                      proposed file name, if any.
         ]]></return>
</method>
<method name='closeFile' fullname='com.adobe.flascc.vfs:DefaultVFS/closeFile' isStatic='false' isFinal='false' isOverride='false'  param_names='fileDescriptor' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
         Closes a file.
         Once this method returns, the file descriptor is no longer valid.
                  ]]></description>
<param><![CDATA[fileDescriptor A file descriptor returned from openFile.
         ]]></param>
</method>
<method name='deleteFile' fullname='com.adobe.flascc.vfs:DefaultVFS/deleteFile' isStatic='false' isFinal='false' isOverride='false'  param_names='path' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
         Deletes a file (or directory) from the filesystem.
         The file must exist, and if it is a directory, it must be empty.
                  ]]></description>
<param><![CDATA[path The absolute path to the file to be deleted.
         ]]></param>
</method>
<method name='getBackingStoreForPath' fullname='com.adobe.flascc.vfs:DefaultVFS/private:getBackingStoreForPath' isStatic='false' isFinal='false' isOverride='false'  param_names='path' param_types='String' param_defaults='undefined' result_type='Object'>
</method>
<method name='getDirectoryEntries' fullname='com.adobe.flascc.vfs:DefaultVFS/getDirectoryEntries' isStatic='false' isFinal='false' isOverride='false'  param_names='dirpath' param_types='String' param_defaults='undefined' result_type='Vector$com.adobe.flascc.vfs:FileHandle'>
<description><![CDATA[
         Retrieves the contents of a directory.
                  ]]></description>
<param><![CDATA[dirpath The absolute path to the directory.
         
         ]]></param>
<return><![CDATA[A Vector of FileHandles, one per file in
                      the directory, or null if the directory does not
                      exist.
         ]]></return>
</method>
<method name='getDirectory' fullname='com.adobe.flascc.vfs:PathUtils/getDirectory' isStatic='true' isFinal='false' isOverride='false'  param_names='path' param_types='String' param_defaults='undefined' result_type='String'>
<description><![CDATA[
        Return everything except the last component of the supplied path.
        ]]></description>
</method>
<method name='getFileHandleFromFileDescriptor' fullname='com.adobe.flascc.vfs:DefaultVFS/getFileHandleFromFileDescriptor' isStatic='false' isFinal='false' isOverride='false'  param_names='fileDescriptor' param_types='int' param_defaults='undefined' result_type='com.adobe.flascc.vfs:FileHandle'>
<description><![CDATA[
         Looks up the FileHandle instance for a file descriptor.
                  ]]></description>
<param><![CDATA[fileDescriptor A file descriptor.
         
         ]]></param>
<return><![CDATA[The FileHandle corresponding to the file descriptor,
                  or null if the file descriptor is not valid.
         ]]></return>
</method>
<method name='getFileHandleFromPath' fullname='com.adobe.flascc.vfs:DefaultVFS/getFileHandleFromPath' isStatic='false' isFinal='false' isOverride='false'  param_names='path' param_types='String' param_defaults='undefined' result_type='com.adobe.flascc.vfs:FileHandle'>
<description><![CDATA[
         Resolves a path to a file.
                  ]]></description>
<param><![CDATA[path The absolute path to the file.
         
         ]]></param>
<return><![CDATA[An FileHandle instance for the file, or null if
                      the file does not exist.
         ]]></return>
</method>
<method name='getPrefixForBackingStore' fullname='com.adobe.flascc.vfs:DefaultVFS/private:getPrefixForBackingStore' isStatic='false' isFinal='false' isOverride='false'  param_names='store' param_types='com.adobe.flascc.vfs:IBackingStore' param_defaults='undefined' result_type='String'>
</method>
<method name='isValidFileDescriptor' fullname='com.adobe.flascc.vfs:DefaultVFS/isValidFileDescriptor' isStatic='false' isFinal='false' isOverride='false'  param_names='fileDescriptor' param_types='int' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
         Determines whether the argument is a valid file descriptor.
                  ]]></description>
<param><![CDATA[fileDescriptor A integer that may or may not be a file descriptor.
         
         ]]></param>
<return><![CDATA[true if the file descriptor is a valid file descriptor
                  corresponding to an open file, false otherwise.
         ]]></return>
</method>
<method name='openFile' fullname='com.adobe.flascc.vfs:DefaultVFS/openFile' isStatic='false' isFinal='false' isOverride='false'  param_names='fileHandle;fileDescriptor' param_types='com.adobe.flascc.vfs:FileHandle;int' param_defaults='undefined;-1' result_type='int'>
<description><![CDATA[
         Opens a file and assigns it a file descriptor.
         A file descriptor is a non-negative integer, which remains
         valid until closeFile is called.
                  ]]></description>
<param><![CDATA[fileHandle A FileHandle instance for the file to be opened.
         ]]></param>
<param><![CDATA[fileDescriptor If specified, the file descriptor to assign. Must not
                      already be a valid file descriptor.
         
         ]]></param>
<return><![CDATA[The file descriptor assigned to this file.
         ]]></return>
</method>
<method name='toCanonicalPath' fullname='com.adobe.flascc.vfs:PathUtils/toCanonicalPath' isStatic='true' isFinal='false' isOverride='false'  param_names='path' param_types='String' param_defaults='undefined' result_type='String'>
<description><![CDATA[
        Return a path equivalent to the argument, with these properties:
        1. is absolute (will always have a leading '/')
        2. doesn't contain '.' or '..' 
        3. never has a trailing '/', even if the argument path did
        4. never has two or more "/" characters in a row
        TODO: Relative paths are assumed to be relative to the 
        current working directory.
        ]]></description>
</method>
<method name='console' fullname='com.adobe.flascc.vfs:DefaultVFS/console/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.adobe.flascc.vfs:ISpecialFile'>
</method>
<method name='console' fullname='com.adobe.flascc.vfs:DefaultVFS/console/set' isStatic='false' isFinal='false' isOverride='false'  param_names='_console' param_types='com.adobe.flascc.vfs:ISpecialFile' param_defaults='undefined' result_type='void'>
<description><![CDATA[
         Set the console for the filesystem.
         This associates the file "/dev/tty" with the console object.
         When the applications writes to stdout and stderr, the console
         object will be called back.
                  ]]></description>
<param><![CDATA[c The console object.
         ]]></param>
</method>
<field name='_bslist' fullname='com.adobe.flascc.vfs:DefaultVFS/private:_bslist' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='_fdTable' fullname='com.adobe.flascc.vfs:DefaultVFS/private:_fdTable' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='_specialFileTable' fullname='com.adobe.flascc.vfs:DefaultVFS/private:_specialFileTable' type='Object' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='consolePath' fullname='com.adobe.flascc.vfs:DefaultVFS/private:consolePath' type='String' isStatic='false' isConst='true' defaultValue='/dev/tty' >
</field>
<classRec name='InMemoryBackingStore' fullname='com.adobe.flascc.vfs:InMemoryBackingStore' sourcefile='F:\crossbridge\posix\vfs\InMemoryBackingStore.as' namespace='com.adobe.flascc.vfs' access='public' baseclass='flash.events:EventDispatcher' interfaces='com.adobe.flascc.vfs:IBackingStore' isFinal='false' isDynamic='false' >
<description><![CDATA[
    The InMemoryBackingStore implements <code>IBackingStore</code> with a memory resident
    mapping between paths and file data stored as a ByteArray.
        <p>This class does not depend on the rest of flascc, so it can be safely
    used in isolation, such as in a preloader.</p>
    ]]></description>
</classRec>
<method name='InMemoryBackingStore' fullname='com.adobe.flascc.vfs:InMemoryBackingStore/InMemoryBackingStore' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
        Construct a new InMemoryBackingStore
        ]]></description>
</method>
<method name='addDirectory' fullname='com.adobe.flascc.vfs:InMemoryBackingStore/addDirectory' isStatic='false' isFinal='false' isOverride='false'  param_names='path' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
        Insert a mapping representing a directory.
        ]]></description>
</method>
<method name='addFile' fullname='com.adobe.flascc.vfs:InMemoryBackingStore/addFile' isStatic='false' isFinal='false' isOverride='false'  param_names='path;data' param_types='String;flash.utils:ByteArray' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
        Insert a mapping from path to data into the filemap.
        ]]></description>
</method>
<method name='deleteFile' fullname='com.adobe.flascc.vfs:InMemoryBackingStore/deleteFile' isStatic='false' isFinal='false' isOverride='false'  param_names='path' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
        Given an array of strings representing file paths, this method removes
        the reference to that file from the filemap.
        ]]></description>
</method>
<method name='flush' fullname='com.adobe.flascc.vfs:InMemoryBackingStore/flush' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
        Commits any outstanding changes to the underlying datastore. This is a no-op in this class,
        but could do something useful in a BackingStore that would benefit from buffering some of its
        actual write operations.
        ]]></description>
</method>
<method name='getFile' fullname='com.adobe.flascc.vfs:InMemoryBackingStore/getFile' isStatic='false' isFinal='false' isOverride='false'  param_names='path' param_types='String' param_defaults='undefined' result_type='flash.utils:ByteArray'>
<description><![CDATA[
        Given a file object returned from makeFileObject this method extracts the contents of that file as a <code>ByteArray</code>
        ]]></description>
</method>
<method name='getPaths' fullname='com.adobe.flascc.vfs:InMemoryBackingStore/getPaths' isStatic='false' isFinal='false' isOverride='false'  result_type='Vector$String'>
<description><![CDATA[
         Retrieves all of the files paths contained in this BackingStore.
                  ]]></description>
<return><![CDATA[A Vector of all file paths contained in this BackingStore.
         ]]></return>
</method>
<method name='isDirectory' fullname='com.adobe.flascc.vfs:InMemoryBackingStore/isDirectory' isStatic='false' isFinal='false' isOverride='false'  param_names='path' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
        Checks if a path is a directory.
        ]]></description>
</method>
<method name='pathExists' fullname='com.adobe.flascc.vfs:InMemoryBackingStore/pathExists' isStatic='false' isFinal='false' isOverride='false'  param_names='path' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
        Checks if a path exists.
        ]]></description>
</method>
<method name='readOnly' fullname='com.adobe.flascc.vfs:InMemoryBackingStore/readOnly/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
        This BackingStore is read-write, so this always returns false.
        ]]></description>
</method>
<field name='filemap' fullname='com.adobe.flascc.vfs:InMemoryBackingStore/private:filemap' type='Object' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<classRec name='URLLoaderVFS' fullname='com.adobe.flascc.vfs:URLLoaderVFS' sourcefile='F:\crossbridge\posix\vfs\URLLoaderVFS.as' namespace='com.adobe.flascc.vfs' access='public' baseclass='com.adobe.flascc.vfs:InMemoryBackingStore' isFinal='false' isDynamic='false' >
<description><![CDATA[
 TBD
 ]]></description>
</classRec>
<method name='URLLoaderVFS' fullname='com.adobe.flascc.vfs:URLLoaderVFS/URLLoaderVFS' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
     Constructor
     ]]></description>
</method>
<method name='dispose' fullname='com.adobe.flascc.vfs:URLLoaderVFS/dispose' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     TBD
     ]]></description>
</method>
<method name='loadManifest' fullname='com.adobe.flascc.vfs:URLLoaderVFS/loadManifest' isStatic='false' isFinal='false' isOverride='false'  param_names='path' param_types='String' param_defaults='manifest' result_type='void'>
<description><![CDATA[
     TBD
     ]]></description>
</method>
<method name='onManifestComplete' fullname='com.adobe.flascc.vfs:URLLoaderVFS/private:onManifestComplete' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onManifestError' fullname='com.adobe.flascc.vfs:URLLoaderVFS/private:onManifestError' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onURLLoaderComplete' fullname='com.adobe.flascc.vfs:URLLoaderVFS/private:onURLLoaderComplete' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onURLLoaderError' fullname='com.adobe.flascc.vfs:URLLoaderVFS/private:onURLLoaderError' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onURLLoaderProgress' fullname='com.adobe.flascc.vfs:URLLoaderVFS/private:onURLLoaderProgress' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:ProgressEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeListeners' fullname='com.adobe.flascc.vfs:URLLoaderVFS/private:removeListeners' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeManifestLoaderListeners' fullname='com.adobe.flascc.vfs:URLLoaderVFS/private:removeManifestLoaderListeners' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='startNewDownload' fullname='com.adobe.flascc.vfs:URLLoaderVFS/private:startNewDownload' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='startNewFile' fullname='com.adobe.flascc.vfs:URLLoaderVFS/private:startNewFile' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='bytesLoaded' fullname='com.adobe.flascc.vfs:URLLoaderVFS/private:bytesLoaded' type='uint' isStatic='false' isConst='false' >
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='currentContents' fullname='com.adobe.flascc.vfs:URLLoaderVFS/private:currentContents' type='flash.utils:ByteArray' isStatic='false' isConst='false' >
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='currentLoader' fullname='com.adobe.flascc.vfs:URLLoaderVFS/private:currentLoader' type='flash.net:URLLoader' isStatic='false' isConst='false' >
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='currentUrls' fullname='com.adobe.flascc.vfs:URLLoaderVFS/private:currentUrls' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='currentVPath' fullname='com.adobe.flascc.vfs:URLLoaderVFS/private:currentVPath' type='String' isStatic='false' isConst='false' >
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='percentComplete' fullname='com.adobe.flascc.vfs:URLLoaderVFS/private:percentComplete' type='uint' isStatic='false' isConst='false' >
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='urlLoader' fullname='com.adobe.flascc.vfs:URLLoaderVFS/private:urlLoader' type='flash.net:URLLoader' isStatic='false' isConst='false' >
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='vfsFiles' fullname='com.adobe.flascc.vfs:URLLoaderVFS/private:vfsFiles' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='LSOBackingStore' fullname='com.adobe.flascc.vfs:LSOBackingStore' sourcefile='F:\crossbridge\posix\vfs\LSOBackingStore.as' namespace='com.adobe.flascc.vfs' access='public' baseclass='com.adobe.flascc.vfs:InMemoryBackingStore' isFinal='false' isDynamic='false' >
<description><![CDATA[
    Extends the InMemoryBackingStore with one that stores and retrieves its data from a Flash
    Local Shared object (<a href="http://www.adobe.com/security/flashplayer/articles/lso/" target="_new">http://www.adobe.com/security/flashplayer/articles/lso/</a>).
    
    <p>The contents of this VFS will persist until the user clears their LSO cache (which might happen when they clear their browser cache.)</p>
    ]]></description>
</classRec>
<method name='LSOBackingStore' fullname='com.adobe.flascc.vfs:LSOBackingStore/LSOBackingStore' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
        Construct an LSOBackingStore using a named local shared object.
        ]]></description>
<name><![CDATA[the name of the Local Shared Object to be used, the property "filemap" will be used to store the VFS.
        ]]></name>
</method>
<method name='flush' fullname='com.adobe.flascc.vfs:LSOBackingStore/flush' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
        Writes all of the files back into the LSO, this might be slow so you need to decide when to call
        this in your application to balance performance with reliability.
        ]]></description>
</method>
<field name='_so' fullname='com.adobe.flascc.vfs:LSOBackingStore/private:_so' type='flash.net:SharedObject' isStatic='false' isConst='false' >
</field>
<classRec name='HTTPBackingStore' fullname='com.adobe.flascc.vfs:HTTPBackingStore' sourcefile='F:\crossbridge\posix\vfs\HTTPBackingStore.as' namespace='com.adobe.flascc.vfs' access='public' baseclass='com.adobe.flascc.vfs:InMemoryBackingStore' isFinal='false' isDynamic='false' >
<description><![CDATA[
	A BackingStore that uses a URLLoader to load its files. This requires a manifest.as file to be
	generated by the "genfs" tool in the flascc SDK. After being constructed, an instance of this
	BackingStore will start downloading the files from the manifest. You can listen to the <code>progress</code>,
	<code>complete</code> and <code>ioerror</code> events to monitor download progress.
		<p>After a download has completed it is added to the VFS and is available for use.</p>
	]]></description>
</classRec>
<method name='HTTPBackingStore' fullname='com.adobe.flascc.vfs:HTTPBackingStore/HTTPBackingStore' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
</method>
<method name='onComplete' fullname='com.adobe.flascc.vfs:HTTPBackingStore/private:onComplete' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
</method>
<method name='onError' fullname='com.adobe.flascc.vfs:HTTPBackingStore/private:onError' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
</method>
<method name='onProgress' fullname='com.adobe.flascc.vfs:HTTPBackingStore/private:onProgress' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
</method>
<method name='startNewDownload' fullname='com.adobe.flascc.vfs:HTTPBackingStore/private:startNewDownload' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='startNewFile' fullname='com.adobe.flascc.vfs:HTTPBackingStore/private:startNewFile' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<field name='bytesLoaded' fullname='com.adobe.flascc.vfs:HTTPBackingStore/private:bytesLoaded' type='uint' isStatic='false' isConst='false' >
</field>
<field name='currentContents' fullname='com.adobe.flascc.vfs:HTTPBackingStore/private:currentContents' type='flash.utils:ByteArray' isStatic='false' isConst='false' >
</field>
<field name='currentLoader' fullname='com.adobe.flascc.vfs:HTTPBackingStore/private:currentLoader' type='flash.net:URLLoader' isStatic='false' isConst='false' >
</field>
<field name='currentUrls' fullname='com.adobe.flascc.vfs:HTTPBackingStore/private:currentUrls' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='currentVPath' fullname='com.adobe.flascc.vfs:HTTPBackingStore/private:currentVPath' type='String' isStatic='false' isConst='false' >
</field>
<field name='percentComplete' fullname='com.adobe.flascc.vfs:HTTPBackingStore/private:percentComplete' type='uint' isStatic='false' isConst='false' >
</field>
<classRec name='DefaultPreloader' fullname='com.adobe.flascc.preloader:DefaultPreloader' sourcefile='F:\crossbridge\posix\DefaultPreloader.as' namespace='com.adobe.flascc.preloader' access='public' baseclass='flash.display:MovieClip' isFinal='false' isDynamic='false' >
<description><![CDATA[
 By default, this preloader is injected into every flascc-generated SWF. After detecting that
 the SWF has fully loaded, it constructs a new Console object, which should cause the SWF to execute.
  <p>If a suitable HTTPBackingStore has been linked into the SWF, it will be be created and the SWF will only
 start once the contents have been downloaded.</p>
  <p>To replace the default preloader, you should compile this class to a SWF and tell gcc/g++ to use
 it with the argument "-swf-preloader=foo.swf". Alternatively, if you don't want a preloader, use "-no-swf-preloader".</p>
 ]]></description>
</classRec>
<method name='DefaultPreloader' fullname='com.adobe.flascc.preloader:DefaultPreloader/DefaultPreloader' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
     Construct the flascc preloader that is injected into every SWF by default.
     ]]></description>
</method>
<method name='dispose' fullname='com.adobe.flascc.preloader:DefaultPreloader/protected:dispose' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='null' result_type='*'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initStage' fullname='com.adobe.flascc.preloader:DefaultPreloader/protected:initStage' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initialize' fullname='com.adobe.flascc.preloader:DefaultPreloader/protected:initialize' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onPreloaderComplete' fullname='com.adobe.flascc.preloader:DefaultPreloader/protected:onPreloaderComplete' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onProgress' fullname='com.adobe.flascc.preloader:DefaultPreloader/protected:onProgress' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:ProgressEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onWebFSComplete' fullname='com.adobe.flascc.preloader:DefaultPreloader/protected:onWebFSComplete' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onWebFSError' fullname='com.adobe.flascc.preloader:DefaultPreloader/protected:onWebFSError' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onWebFSProgress' fullname='com.adobe.flascc.preloader:DefaultPreloader/protected:onWebFSProgress' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:ProgressEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeListeners' fullname='com.adobe.flascc.preloader:DefaultPreloader/protected:removeListeners' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeWebFSListeners' fullname='com.adobe.flascc.preloader:DefaultPreloader/protected:removeWebFSListeners' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='render' fullname='com.adobe.flascc.preloader:DefaultPreloader/protected:render' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='barHeight' fullname='com.adobe.flascc.preloader:DefaultPreloader/protected:barHeight' type='uint' isStatic='false' isConst='false' defaultValue='40' >
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='isWebFSFailed' fullname='com.adobe.flascc.preloader:DefaultPreloader/protected:isWebFSFailed' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='isWebFSFinished' fullname='com.adobe.flascc.preloader:DefaultPreloader/protected:isWebFSFinished' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='swfPercent' fullname='com.adobe.flascc.preloader:DefaultPreloader/protected:swfPercent' type='Number' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='webFSPercent' fullname='com.adobe.flascc.preloader:DefaultPreloader/protected:webFSPercent' type='Number' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='webFS' fullname='com.adobe.flascc.preloader:DefaultPreloader/protected:webFS' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</field>
</asdoc>
